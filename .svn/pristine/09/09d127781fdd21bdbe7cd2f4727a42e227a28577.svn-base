package com.vtradex.wms.server.service.pickticket.pojo;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang3.StringUtils;

import com.vtradex.rf.common.exception.RfBusinessException;
import com.vtradex.thorn.server.exception.BusinessException;
import com.vtradex.thorn.server.model.EntityFactory;
import com.vtradex.thorn.server.model.security.ThornBaseOrganization;
import com.vtradex.thorn.server.service.WorkflowManager;
import com.vtradex.thorn.server.util.LocalizedMessage;
import com.vtradex.thorn.server.web.security.BaseOrganizationHolder;
import com.vtradex.wms.server.model.entity.base.WmsCustomer;
import com.vtradex.wms.server.model.entity.base.WmsFactoryWarehouse;
import com.vtradex.wms.server.model.entity.base.WmsFactoryXmlb;
import com.vtradex.wms.server.model.entity.base.WmsItemFactory;
import com.vtradex.wms.server.model.entity.item.WmsBillType;
import com.vtradex.wms.server.model.entity.item.WmsCompany;
import com.vtradex.wms.server.model.entity.item.WmsItem;
import com.vtradex.wms.server.model.entity.item.WmsPackageUnit;
import com.vtradex.wms.server.model.entity.item.WmsWarehouseCompany;
import com.vtradex.wms.server.model.entity.pickticket.WmsPickTicket;
import com.vtradex.wms.server.model.entity.pickticket.WmsPickTicketDetail;
import com.vtradex.wms.server.model.entity.pickticket.WmsPickTicketDetailRequire;
import com.vtradex.wms.server.model.entity.pickticket.WmsWaveDoc;
import com.vtradex.wms.server.model.entity.production.ProductionOrder;
import com.vtradex.wms.server.model.entity.production.ProductionOrderDetail;
import com.vtradex.wms.server.model.entity.production.ProductionOrderDetailPtDetail;
import com.vtradex.wms.server.model.entity.production.ReservedOrderDetailPtDetail;
import com.vtradex.wms.server.model.entity.production.WmsReservedOrder;
import com.vtradex.wms.server.model.entity.production.WmsReservedOrderDetail;
import com.vtradex.wms.server.model.entity.warehouse.WmsLocation;
import com.vtradex.wms.server.model.entity.warehouse.WmsWarehouse;
import com.vtradex.wms.server.model.entity.workdoc.WmsTask;
import com.vtradex.wms.server.model.entity.workdoc.WmsWorkDoc;
import com.vtradex.wms.server.model.enums.BaseStatus;
import com.vtradex.wms.server.model.enums.WmsBillOfType;
import com.vtradex.wms.server.model.enums.WmsLocationCode;
import com.vtradex.wms.server.model.enums.WmsLotCategoryType;
import com.vtradex.wms.server.model.enums.WmsPickTicketStatus;
import com.vtradex.wms.server.model.enums.WmsPickticketBillTypeCode;
import com.vtradex.wms.server.model.enums.WmsPickticketGenType;
import com.vtradex.wms.server.model.enums.WmsSOQueryRequireType;
import com.vtradex.wms.server.model.enums.WmsTaskStatus;
import com.vtradex.wms.server.model.enums.WmsWaveDocStatus;
import com.vtradex.wms.server.model.enums.WmsWorkDocStatus;
import com.vtradex.wms.server.service.inventory.WmsInventoryManager;
import com.vtradex.wms.server.service.message.WmsCustomerManager;
import com.vtradex.wms.server.service.pickticket.WmsTclPickticketManager;
import com.vtradex.wms.server.service.replenish.WmsMoveDocReplenishmentManager;
import com.vtradex.wms.server.service.rule.WmsRuleManager;
import com.vtradex.wms.server.service.sequence.WmsBussinessCodeManager;
import com.vtradex.wms.server.service.workdoc.WmsTclWorkDocManager;
import com.vtradex.wms.server.service.workdoc.WmsTransactionalManager;
import com.vtradex.wms.server.utils.DoubleUtils;
import com.vtradex.wms.server.utils.StringHelper;
import com.vtradex.wms.server.utils.WmsPackageUnitUtils;

/**
 * 
 * tcl定制化拣货单业务 
 * 分配与取消分配修改回写相应单据
 * 
 * @author <a href="zhen.lei@vtradex.com">Yogurt_lei</a>
 * 
 * @date 2017年7月18日 下午4:03:32
 */
public class DefaultWmsTclPickticketManager extends DefaultWmsPickticketManager implements WmsTclPickticketManager{
    private WorkflowManager workflowManager;
    private WmsRuleManager wmsRuleManager;
    private WmsTransactionalManager wmsTransactionalManager;
    
    private WmsBussinessCodeManager wmsBussinessCodeManager;
    
    public DefaultWmsTclPickticketManager(
            WorkflowManager workflowManager,
            WmsInventoryManager inventoryManager,
            WmsBussinessCodeManager wmsBussinessCodeManager,
            WmsRuleManager wmsRuleManager,
            WmsCustomerManager wmsCustomerManager,
            WmsTransactionalManager wmsTransactionalManager,
            WmsMoveDocReplenishmentManager wmsMoveDocReplenishmentManager) {
        super(workflowManager, inventoryManager, wmsBussinessCodeManager,
                wmsRuleManager, wmsCustomerManager, wmsTransactionalManager,
                wmsMoveDocReplenishmentManager);
        this.workflowManager = workflowManager;
        this.wmsRuleManager = wmsRuleManager;
        this.wmsTransactionalManager = wmsTransactionalManager;
        this.wmsBussinessCodeManager = wmsBussinessCodeManager;
    }
    
    @Override
    public void manualCancelAllocate(Map<Long, Double> cancelInfo) {
        for (Long key : cancelInfo.keySet()) {
            WmsTask task = commonDao.load(WmsTask.class, key);
            if(task.getStatus().equals(WmsTaskStatus.IN_OPERATION)||task.getStatus().equals(WmsTaskStatus.FINISH)){
                throw new BusinessException("task.have.already.started");
            }
            Double qty = cancelInfo.get(key);
            
            if(task.getUnmovedQuantityBU() < qty){
                throw new BusinessException("qty.is.greater.than.unmovedQuantityBU");
            }
            
            Double packQty = WmsPackageUnitUtils.getPackQty(task.getPackageUnit(), qty, task.getItem().getBuPrecision());
            
            inventoryManager.cancelPlanIn(task, qty);
            task.setInvRelatedBillType(WmsBillOfType.PT);
            inventoryManager.cancelPlanOut(task, qty);
            
            Long pickTicketDetailId = task.getRelatedObjId();
            
            task.planQty(-qty,-packQty);//扣除计划移位包装数量和移位数量
            if(task.getPlanQty().doubleValue() <= 0){
                boolean deleteWorkDoc = false;
                WmsWorkDoc workDoc = null;
                if(task.getWorkDoc()!=null && task.getWorkDoc().getQty().doubleValue() <= 0){
                    deleteWorkDoc = true;
                    workDoc = task.getWorkDoc();
                }else if (task.getWorkDoc()!=null && task.getWorkDoc().getQty().doubleValue() > 0){
                    workDoc = this.commonDao.load(WmsWorkDoc.class, task.getWorkDoc().getId());
                    if(workDoc.getQty().doubleValue() <= workDoc.getPickedQty().doubleValue()){
                        workDoc.setStatus(WmsWorkDocStatus.FINISH);
                        this.commonDao.store(workDoc);
                    }
                }
                commonDao.delete(task);
                if(deleteWorkDoc){
                    commonDao.delete(workDoc);
                }
            }
            
            WmsPickTicketDetail detail = commonDao.load(WmsPickTicketDetail.class, pickTicketDetailId);
            detail.allocate(-qty);
            this.tclCustomCancelAllocate(detail, qty);
            // 取消分配 回写tcl单据
            commonDao.store(detail);
            
            workflowManager.doWorkflow(detail.getPickTicket(),"wmsPickTicketProcess.cancelSingle");
            if(detail.getPickTicket().getWaveDoc()!=null){
                //如果波次单状态为生效/作业中/完成,则不允许进行取消分配
                WmsWaveDoc waveDoc = this.commonDao.load(WmsWaveDoc.class, detail.getPickTicket().getWaveDoc().getId());
                if(!WmsWaveDocStatus.OPEN.equals(waveDoc.getStatus())&&!WmsWaveDocStatus.PARTALLOCATED.equals(waveDoc.getStatus())
                        &&!WmsWaveDocStatus.ALLOCATED.equals(waveDoc.getStatus())){
                    throw new BusinessException("this.wavedoc.is.already.worked.can.not.be.cancelAllocate");
                }
                workflowManager.doWorkflow(detail.getPickTicket().getWaveDoc(),"wmsWaveDocProcess.cancelAllocate");
            }
        }
    }

    /*
    * 拣货单取消分配时修改工单明细分配数量  生产订单id小到大+生产订单明细id小到大
    * 
    * @param pickTicketDetail 拣货单明细
    * @param allocateQty 分配数量
    *
    * @author Yogurt_lei
    *
    * @date 2017年7月18日 下午4:47:57
    */
    private void tclCustomCancelAllocate(WmsPickTicketDetail pickTicketDetail, Double cancelAllocateQty) {
        WmsPickTicket pt = pickTicketDetail.getPickTicket();
	   	if(pt.getBillType().getCode().equals(WmsPickticketGenType.SCLLD)) {
		   	 List<Long> podIds =  commonDao.findByQuery("SELECT pod.id FROM ProductionOrderDetailPtDetail pt "
		             + "LEFT JOIN pt.productionOrderDetail pod "
		             + "WHERE pt.pickticketDetail.id=:ptID AND pod.allocatedQuantityBu>0"
		             + "ORDER BY pod.productionOrder.id, pod.id DESC", 
		                 "ptID", pickTicketDetail.getId());
		     
		     for (Long podId : podIds) {
		         ProductionOrderDetail pod = commonDao.load(ProductionOrderDetail.class, podId);
		         Double allocateQty = pod.getAllocatedQuantityBu();
		         
		         if (cancelAllocateQty <= 0) {
		             break;
		         }
		         
		         if(allocateQty > cancelAllocateQty){
		             System.out.println("拣货单取消分配修改工单明细("+podId+")："+ cancelAllocateQty);
		             pod.subAllocatedQuantityBu(cancelAllocateQty);
		             cancelAllocateQty = 0D;
		         }else{
		             System.out.println("拣货单取消分配修改工单明细("+podId+")："+ allocateQty);
		             pod.subAllocatedQuantityBu(allocateQty);
		             cancelAllocateQty = DoubleUtils.sub(cancelAllocateQty, allocateQty);
		         }
		         
		     }
	   	}
	   	else if(pt.getBillType().getCode().equals(WmsPickticketGenType.YLCKD)){ //预留出库单
	   		List<Long> podIds =  commonDao.findByQuery("SELECT pod.id FROM ReservedOrderDetailPtDetail pt "
		             + "LEFT JOIN pt.reservedOrderDetail pod "
		             + "WHERE pt.pickticketDetail.id=:ptID AND pod.allocatedQuantityBu>0"
		             + "ORDER BY pod.reservedOrder.id, pod.id DESC", 
		                 "ptID", pickTicketDetail.getId());
		     
		     for (Long podId : podIds) {
		    	 WmsReservedOrderDetail pod = commonDao.load(WmsReservedOrderDetail.class, podId);
		         Double allocateQty = pod.getAllocatedQuantityBu();
		         
		         if (cancelAllocateQty <= 0) {
		             break;
		         }
		         
		         if(allocateQty > cancelAllocateQty){
		             System.out.println("拣货单取消分配修改预留明细("+podId+")："+ cancelAllocateQty);
		             pod.subAllocatedQuantityBu(cancelAllocateQty);
		             cancelAllocateQty = 0D;
		         }else{
		             System.out.println("拣货单取消分配修改预留明细("+podId+")："+ allocateQty);
		             pod.subAllocatedQuantityBu(allocateQty);
		             cancelAllocateQty = DoubleUtils.sub(cancelAllocateQty, allocateQty);
		         }
		         
		     }
		        
	   	}
       
   }
    
    /**
     * @author haibin.deng
     * @Description 拣货单转换仓库 根据生产单明细 ProductionOrderDetailPtDetail
     */
    public void pickTicketconvertWarehouse(WmsPickTicket wmsPickTicket){
    	
    	if (wmsPickTicket.getDetails().isEmpty()) {
    		throw new BusinessException("WmsPickTicketDetail.can.not.be.empty");
    	}
    	ProductionOrderDetailPtDetail podd = null;//生产计划拣货单关系表
    	ReservedOrderDetailPtDetail rodd = null;//预留单拣货单关系表
    	String billCode = wmsPickTicket.getBillType().getCode();
    	for (WmsPickTicketDetail pickTicketDetail : wmsPickTicket.getDetails()) {
    		if(billCode.equals(WmsPickticketGenType.SCLLD)){//生产领料单
    			podd = findProductionOrderDetailPtDetailByPTDetail(pickTicketDetail);
        		if (null != podd) {
        			break;
        		}
    		}else if(billCode.equals(WmsPickticketGenType.YLCKD)){//预留出库单
    			rodd = findReservedOrderDetailPtDetailByPTDetail(pickTicketDetail);
    			if (null != rodd) {
        			break;
        		}
    		}
    		
		}
    	if (null == podd && billCode.equals(WmsPickticketGenType.SCLLD)) {
    		throw new BusinessException("find.productionOrderDetailPtDetail.by.pickTicketDetail.is.empty");
    	}else if(null == rodd && billCode.equals(WmsPickticketGenType.YLCKD)){
    		throw new BusinessException("find.ReservedOrderDetailPtDetail.by.pickTicketDetail.is.empty");
    	}
    	WmsFactoryWarehouse factoryWarehouse = null;
    	String factoryName = null;
    	if(billCode.equals(WmsPickticketGenType.SCLLD)){
    		
    		ProductionOrder productionOrder = podd.getProductionOrderDetail().getProductionOrder();
    		factoryWarehouse = findWmsFactoryWarehouse(productionOrder.getFactory().getId());
    		factoryName = productionOrder.getFactory().getName();
    		
    	}else if(billCode.equals(WmsPickticketGenType.YLCKD)){
    		
    		WmsReservedOrder reservedOrder = rodd.getReservedOrderDetail().getReservedOrder();
    		factoryWarehouse = findWmsFactoryWarehouse(reservedOrder.getFactory().getId());
    		factoryName = reservedOrder.getFactory().getName();
    	}
    	
    	if (null == factoryWarehouse) {
    		throw new BusinessException("find.WmsFactoryWarehouse.by.factory.to.warehouse.is.empty",new String[]{factoryName});
    	}
    	WmsWarehouse convertWarehouse = factoryWarehouse.getWarehouse();
    	WmsLocation location = findLocationByWareHouse(convertWarehouse.getId());
    	
    	wmsPickTicket.setWarehouse(convertWarehouse);
    	wmsPickTicket.setShipLocation(location);
    	this.commonDao.store(wmsPickTicket);
    	LocalizedMessage.addMessage("单号: "+wmsPickTicket.getCode()+" 已转到仓库: "+convertWarehouse.getName());
    }
    
	public WmsFactoryWarehouse findWmsFactoryWarehouse(Long factoryId){
		String hql = "  FROM WmsFactoryWarehouse fw WHERE fw.factory.id =:factoryId "
						+ " AND fw.type =:type";
		return  (WmsFactoryWarehouse) this.commonDao.findByQueryUniqueResult(hql, new String[]{"factoryId","type"}, new Object[]{factoryId,WmsFactoryXmlb.BZ});
	}
    
    @SuppressWarnings("unchecked")
	public ProductionOrderDetailPtDetail findProductionOrderDetailPtDetailByPTDetail(WmsPickTicketDetail PTDetail){
    	String hql = " FROM ProductionOrderDetailPtDetail podd WHERE podd.pickticketDetail.id =:pickticketDetailId";
    	List<ProductionOrderDetailPtDetail> poddList = this.commonDao.findByQuery(hql, "pickticketDetailId", PTDetail.getId());
    	if (poddList.isEmpty()) {
    		throw new BusinessException("not.found.ProductionOrderDetailPtDetail.by.WmsPickTicketDetail");
    	} else {
    		return poddList.get(0);
    	}
    	
    }
    
    public ReservedOrderDetailPtDetail findReservedOrderDetailPtDetailByPTDetail(WmsPickTicketDetail PTDetail){
    	String hql = " FROM ReservedOrderDetailPtDetail rodd WHERE rodd.pickticketDetail.id =:pickticketDetailId";
    	List<ReservedOrderDetailPtDetail> roddList = this.commonDao.findByQuery(hql, "pickticketDetailId", PTDetail.getId());
    	if (roddList.isEmpty()) {
    		throw new BusinessException("not.found.ReservedOrderDetailPtDetail.by.WmsPickTicketDetail");
    	} else {
    		return roddList.get(0);
    	}
    }
    
    @SuppressWarnings("unchecked")
	@Override
    public void autoAllocate(WmsPickTicketDetail pickTicketDetail) {

        pickTicketDetail = this.commonDao.load(WmsPickTicketDetail.class,
                pickTicketDetail.getId());
        WmsPickTicket pickTicket = this.commonDao.load(WmsPickTicket.class, pickTicketDetail.getPickTicket().getId());
        //校验
        if (pickTicketDetail.getUnAllocateQty() <= 0){
            return;
        }
        
        WmsLocation shipLocation = null; 
        if(pickTicket.getShipLocation() == null){
            throw new BusinessException("pickTicket.shipLocation.can.not.be.null", new String[]{pickTicket.getCode()});
        }else{
            shipLocation = commonDao.load(WmsLocation.class, pickTicket.getShipLocation().getId());
        }

        WmsWarehouse warehouse = this.commonDao.load(WmsWarehouse.class, pickTicket.getWarehouse().getId());
        ThornBaseOrganization baserOrganization = this.commonDao.load(ThornBaseOrganization.class, warehouse.getBaseOrganization().getId());
        WmsCompany company = this.commonDao.load(WmsCompany.class,pickTicket.getCompany().getId());
        WmsBillType billType = this.commonDao.load(WmsBillType.class, pickTicket.getBillType().getId());
        WmsItem item = this.commonDao.load(WmsItem.class, pickTicketDetail.getItem().getId());
        WmsPackageUnit unit = this.commonDao.load(WmsPackageUnit.class, pickTicketDetail.getPackageUnit().getId());
        Map<Long, Double> allocateInfo = new LinkedHashMap<Long, Double>();
        Map<String, Object> problem = new HashMap<String, Object>();
        
        problem.put("组织", baserOrganization.getId());
        problem.put("模型", baserOrganization.getBusinessModel().getId());
        problem.put("仓库ID", warehouse.getId());
        problem.put("货主ID", company.getId());
        problem.put("货主名称", company.getName());
        problem.put("单据类型", billType.getName());
        problem.put("拣货组", item.getAllocationGroup());
        problem.put("包装级别", unit.getUnitLevel());
        problem.put("库存状态", pickTicketDetail.getInventoryStatus());
        problem.put("待拣选数量", pickTicketDetail.getUnAllocateQty());
        problem.put("数量", pickTicketDetail.getExpectedQty());
        problem.put("货品ID", item.getId());
        problem.put("是否越库", pickTicket.getAllowCross()?"是":"否");
        problem.put("拣货单号", pickTicket.getCode());  //增加捡货单号，查询是否有对应生产单的生产线
        
        List<WmsPickTicketDetailRequire> reqs = commonDao.findByQuery(" FROM WmsPickTicketDetailRequire r "
                + "WHERE r.pickTicketDetail.id =:ptdId ", "ptdId", pickTicketDetail.getId());
        
        List<Map<String,Object>> lotList = new ArrayList<Map<String,Object>>();
        for(WmsPickTicketDetailRequire req:reqs){
            Map<String,Object> map = new HashMap<String, Object>();
            map.put("要求1", req.getLotValue1());
            map.put("要求2", req.getLotValue2());
            map.put("要求3", req.getLotValue3());
            map.put("要求4", req.getLotValue4());
            map.put("要求5", req.getLotValue5());
            map.put("批次属性", req.getLotKey());
            map.put("指定级别", req.getLevel());
            map.put("查询要求", req.getQueryRequire());
            lotList.add(map);
        }
        
        problem.put("拣货批次要求列表", lotList);
        problem.put("拆包属性",item.getUserFieldV3() == null ? "" : item.getUserFieldV3());
        Map<String, Object> result = new LinkedHashMap<String, Object>();
        int flag = 0;
        //根据收货人组查询规则表调用拣货分配规则
        if(pickTicket.getCustomer()!=null){     
            WmsCustomer customer = this.commonDao.load(WmsCustomer.class, pickTicket.getCustomer().getId());
            String customerGroup = customer.getCustomerGroup();
            if(!StringUtils.isEmpty(customerGroup)){
                Map<String, Object> value = new HashMap<String, Object>();
                try{
                 value = wmsRuleManager.getRuleTableDetail(
                        "R101_收货人组_拣货规则配置规则表", customerGroup);
                }catch(Exception e){
                    throw new BusinessException(e.getMessage());
                }
                if(value!=null&&!"".equals(value)){
                    String mainRule =  "R101_"+value.get("拣货分配规则").toString();
                    result = wmsRuleManager.execute(baserOrganization, value.get("拣货分配规则").toString(), mainRule, problem);
                    flag = 1;
                 }
            }
        }
       if(flag==0){
           result = wmsRuleManager.execute(baserOrganization, "拣货分配规则", "R101_拣货分配规则", problem);
       }
        
        List<Map<String, Object>> resultList = (List<Map<String, Object>>) result.get("返回列表");
        for(Map<String, Object> obj : resultList){
            Long inventoryId = (Long)obj.get("库存ID");
            Double qty = Double.valueOf(String.valueOf(obj.get("分配数量")));
            if (allocateInfo.get(inventoryId)==null) {
                allocateInfo.put(inventoryId, qty);
            } else {
                allocateInfo.put(inventoryId, allocateInfo.get(inventoryId)+qty);
            }
        }
        //分配库存
        wmsTransactionalManager.doAutoAllocateResult(pickTicketDetail, allocateInfo, shipLocation);
        
    }
    
    public WmsRuleManager getWmsRuleManager() {
        return wmsRuleManager;
    }

    public void setWmsRuleManager(WmsRuleManager wmsRuleManager) {
        this.wmsRuleManager = wmsRuleManager;
    }

    public WmsTransactionalManager getWmsTransactionalManager() {
        return wmsTransactionalManager;
    }

    public void setWmsTransactionalManager(
            WmsTransactionalManager wmsTransactionalManager) {
        this.wmsTransactionalManager = wmsTransactionalManager;
    }

    
	/**
	 * 
	 * @Title: supplyWarehouseReplenish
	 * 
	 * @Description: 供货仓拉动补货
	 * 
	 * @return void    
	 *
	 * @throws 
	 *
	 * @author <a href="mailto:xu.feng@vtradex.com"/>冯旭/a>
	 *
	 * @date 2017年6月20日 10:08:56
	 */
	public void supplyWarehouseReplenish(WmsPickTicket wmsPickTicket) {
		WmsWarehouse wh = (WmsWarehouse)commonDao.findByQueryUniqueResult("FROM WmsWarehouse warehouse WHERE warehouse.baseOrganization.id = :baseOrganizationId", 
				new String[] {"baseOrganizationId"}, new Object[] {BaseOrganizationHolder.getThornBaseOrganization().getId()});
		//供货仓
		WmsWarehouse supplyWarehouse = null;
		if(wh.getSupplyWarehouse() != null && wh.getSupplyWarehouse().getId() != null) {
			supplyWarehouse = commonDao.load(WmsWarehouse.class, wh.getSupplyWarehouse().getId());
		}
		//供货仓是否维护 or 供货仓是否有效状态 or 单据为可执行
		if(supplyWarehouse == null) {
			throw new BusinessException("this.supply.warehouse.is.not.maintain");
		} else if(BaseStatus.DISABLED.equals(supplyWarehouse.getStatus())) {
			throw new BusinessException("this.supply.warehouse.is.disabled");
		} else if(!wmsPickTicket.getIsExecutable()) {
			throw new BusinessException("this.pickticket.is.enexecutable");
		}
		WmsPickTicket supplyPickTicket = null;
		WmsPickTicket currentNewPickTicket = null;
		//计划数量>已分配数量，生成新拣货单
		if(wmsPickTicket.getQty() > wmsPickTicket.getAllocateQty()) {
			//创建供货补货拣货单
			supplyPickTicket = createNewSupplyPickTicket(supplyWarehouse, wmsPickTicket);
		}
		//原拣货单已分配数量==0
		if(wmsPickTicket.getAllocateQty() == 0 && WmsPickTicketStatus.OPEN.equals(wmsPickTicket.getStatus())) {
			wmsPickTicket.setIsExecutable(Boolean.FALSE);
			wmsPickTicket.setStatus(WmsPickTicketStatus.CLOSED);
		}
		//原拣货单已分配数量>0
		if(wmsPickTicket.getAllocateQty() > 0) {
			//当前仓库生成新的拣货单
			currentNewPickTicket = createCarrenPickTicket(wmsPickTicket, wh);
			//删除分配数量为0的明细
			deleteCurrentPickTicketDetail(wmsPickTicket);
		}
		//设置原始单据id
		if(currentNewPickTicket != null) {
			supplyPickTicket.setOriginalId(currentNewPickTicket.getId());
			wmsPickTicket.setOriginalId(currentNewPickTicket.getId());
		} else {
			supplyPickTicket.setOriginalId(wmsPickTicket.getId());
		}
		//不为关闭状态，则重新定义状态
		if(!WmsPickTicketStatus.CLOSED.equals(wmsPickTicket.getStatus())) {
			wmsPickTicket.setStatus(wmsPickTicket.defineStatus());
		}
		this.commonDao.store(wmsPickTicket);
		this.commonDao.store(supplyPickTicket);
		
//		
//		System.out.println(wmsPickTicket.getCode());//老单子  被拆分出来的 部分数量。
//		System.out.println(currentNewPickTicket.getCode());//新生成的被关闭的单子
//		System.out.println(supplyPickTicket.getCode());//新生成的 在另外仓库的 部分数量
//		
		
		
	}
	
	/**
	 * 创建供货仓补货拣货单
	 * @param createNewSupplyPickTicket
	 * @param wmsPickTicket
	 * @return
	 */
	private WmsPickTicket createNewSupplyPickTicket(WmsWarehouse supplyWarehouse, WmsPickTicket wmsPickTicket) {
		//新建拣货单
		WmsPickTicket newPickTicket = new WmsPickTicket();
		//设置仓库为供货仓
		newPickTicket.setWarehouse(supplyWarehouse);
		WmsBillType wmsBillType = commonDao.load(WmsBillType.class, wmsPickTicket.getBillType().getId());
		String billCode = wmsBillType.getCode();//单据类型编码
		//供货仓拣货单号
		String newPickTicketCode = wmsBussinessCodeManager.generateCodeByRule(supplyWarehouse,billCode);
		newPickTicket.setCode(newPickTicketCode);
		//原拣货单货主是否绑定供货仓仓库
		WmsWarehouseCompany wc = (WmsWarehouseCompany)commonDao.findByQueryUniqueResult("FROM WmsWarehouseCompany wareCompany WHERE wareCompany.warehouse.id=:warehouseId AND wareCompany.company.id=:companyId", 
				new String[] {"warehouseId", "companyId"}, new Object[] {supplyWarehouse.getId(), wmsPickTicket.getCompany().getId()});
		if(wc == null) {
			throw new BusinessException("this.old.pickticket.company.not.have.supplyWarehouse");
		}
		
		WmsLocation location = findLocationByWareHouse(supplyWarehouse.getId());
		
		newPickTicket.setCompany(wc.getCompany());
		newPickTicket.setBillType(wmsBillType);
		//是否原始单据号为否
		newPickTicket.setIsOriginal(Boolean.FALSE);
		//原始单据id
		newPickTicket.setOriginalId(wmsPickTicket.getId());
		//锁单
		newPickTicket.setIsHold(wmsPickTicket.getIsHold());
		newPickTicket.setStatus(WmsPickTicketStatus.OPEN);
		newPickTicket.setRelatedBill1(wmsPickTicket.getRelatedBill1());
		newPickTicket.setRelatedBill2(wmsPickTicket.getRelatedBill2());
		newPickTicket.setRelatedBill3(wmsPickTicket.getRelatedBill3());
		newPickTicket.setCustomer(wmsPickTicket.getCustomer());
		newPickTicket.setShipToName(wmsPickTicket.getShipToName());
		newPickTicket.setContact(wmsPickTicket.getContact());
		newPickTicket.setOrderDate(wmsPickTicket.getOrderDate());
		newPickTicket.setPriority(wmsPickTicket.getPriority());
		newPickTicket.setIntendShipDate(wmsPickTicket.getIntendShipDate());
		newPickTicket.setExpectedPickFinishDate(wmsPickTicket.getExpectedPickFinishDate());
		newPickTicket.setFinshDate(wmsPickTicket.getFinshDate());
		newPickTicket.setDescription(wmsPickTicket.getDescription());
		newPickTicket.setShipDock(wmsPickTicket.getShipDock());
		newPickTicket.setShipLocation(location);//备货库位
		newPickTicket.setCarrier(wmsPickTicket.getCarrier());
		newPickTicket.setRequireArriveDate(wmsPickTicket.getRequireArriveDate());
		newPickTicket.setAllowShortShip(wmsPickTicket.getAllowShortShip());
		newPickTicket.setUserField1(wmsPickTicket.getUserField1());
		newPickTicket.setUserField2(wmsPickTicket.getUserField2());
		newPickTicket.setUserField3(wmsPickTicket.getUserField3());
		newPickTicket.setUserField4(wmsPickTicket.getUserField4());
		newPickTicket.setUserField5(wmsPickTicket.getUserField5());
		newPickTicket.setUserField6(wmsPickTicket.getUserField6());
		newPickTicket.setUserField7(wmsPickTicket.getUserField7());
		newPickTicket.setUserField8(wmsPickTicket.getUserField8());
		newPickTicket.setUserField9(wmsPickTicket.getUserField9());
		newPickTicket.setUserField10(wmsPickTicket.getUserField10());
		newPickTicket.setUserField11(wmsPickTicket.getUserField11());
		newPickTicket.setUserField12(wmsPickTicket.getUserField12());
		newPickTicket.setUserField13(wmsPickTicket.getUserField13());
		newPickTicket.setUserField14(wmsPickTicket.getUserField14());
		newPickTicket.setUserField15(wmsPickTicket.getUserField15());
		newPickTicket.setUserField16(wmsPickTicket.getUserField16());
		newPickTicket.setUserField17(wmsPickTicket.getUserField17());
		newPickTicket.setUserField18(wmsPickTicket.getUserField18());
		newPickTicket.setUserField19(wmsPickTicket.getUserField19());
		newPickTicket.setUserField20(wmsPickTicket.getUserField20());
		newPickTicket.setUserField21(wmsPickTicket.getUserField21());
		newPickTicket.setUserField22(wmsPickTicket.getUserField22());
		newPickTicket.setUserField23(wmsPickTicket.getUserField23());
		newPickTicket.setUserField24(wmsPickTicket.getUserField24());
		newPickTicket.setAllowCross(wmsPickTicket.getAllowCross());
		newPickTicket.setRoute(wmsPickTicket.getRoute());
		newPickTicket.setAllowLotSwap(wmsPickTicket.getAllowLotSwap());
		newPickTicket.setWaitReplenish(wmsPickTicket.getWaitReplenish());
		//计划数量=原拣货单计划数量-已分配数量
		newPickTicket.setQty(wmsPickTicket.getQty() - wmsPickTicket.getAllocateQty());
		//保存
		commonDao.store(newPickTicket);
		//拣货明细清单
		Set<WmsPickTicketDetail> detailSets = wmsPickTicket.getDetails();
		//排序
		List<WmsPickTicketDetail> details = new ArrayList<WmsPickTicketDetail>(detailSets);
		Collections.sort(details, new Comparator() {
	        @Override
	        public int compare(Object o1, Object o2) {
	        	WmsPickTicketDetail d1 = (WmsPickTicketDetail)o1;
	        	WmsPickTicketDetail d2 = (WmsPickTicketDetail)o2;
	            if(d1.getId() > d2.getId()) {
	                return 1;
	            } else if(d1.getId() == d2.getId()) {
	                return 0;
	            } else {
	                return -1;
	            }
	        }       
		});
		//行号
		Integer lineNo = 1;
		for (WmsPickTicketDetail wmsPickTicketDetail : details) {
			//新期待数量：原拣货单明细.计划数量-已分配数量>0
			Double expectedQty = wmsPickTicketDetail.getExpectedQty() - wmsPickTicketDetail.getAllocatedQty();
			if(expectedQty > 0) {
				WmsItem wmsItem = this.commonDao.load(WmsItem.class, wmsPickTicketDetail.getItem().getId());
				WmsPackageUnit wmsPackageUnit = this.commonDao.load(WmsPackageUnit.class, wmsPickTicketDetail.getPackageUnit().getId());
				WmsPickTicketDetail newWmsPickTicketDetail = new WmsPickTicketDetail();
				newWmsPickTicketDetail.setPickTicket(newPickTicket);
				newWmsPickTicketDetail.setLineNo(lineNo);
				newWmsPickTicketDetail.setItem(wmsItem);
				newWmsPickTicketDetail.setInventoryStatus(wmsPickTicketDetail.getInventoryStatus());
				newWmsPickTicketDetail.setPackageUnit(wmsPackageUnit);
				//件装量
				Double convertFigure = wmsPackageUnit.getConvertFigure();
				//期待包装数量： 新期待数量/折算系数(取货品基本单位精度)
				Double expectedPackQty = DoubleUtils.round(expectedQty / convertFigure, wmsItem.getBuPrecision());
				newWmsPickTicketDetail.setExpectedPackQty(expectedPackQty);
				newWmsPickTicketDetail.setExpectedQty(expectedQty);
				newWmsPickTicketDetail.setAllocatedQty(0D);
				newWmsPickTicketDetail.setPickedQty(0D);
				newWmsPickTicketDetail.setPlanedShipQty(0D);
				newWmsPickTicketDetail.setShippedQty(0D);
				newWmsPickTicketDetail.setFullpackAllocation(wmsPickTicketDetail.getFullpackAllocation());
				newWmsPickTicketDetail.setOverpickRate(wmsPickTicketDetail.getOverpickRate());
				newWmsPickTicketDetail.setUserField1(wmsPickTicketDetail.getUserField1());
				newWmsPickTicketDetail.setUserField2(wmsPickTicketDetail.getUserField2());
				newWmsPickTicketDetail.setUserField3(wmsPickTicketDetail.getUserField3());
				newWmsPickTicketDetail.setUserField4(wmsPickTicketDetail.getUserField4());
				newWmsPickTicketDetail.setUserField5(wmsPickTicketDetail.getUserField5());
				newWmsPickTicketDetail.setUserField6(wmsPickTicketDetail.getUserField6());
				newWmsPickTicketDetail.setUserField7(wmsPickTicketDetail.getUserField7());
				newWmsPickTicketDetail.setUserField8(wmsPickTicketDetail.getUserField8());
				newWmsPickTicketDetail.setUserField9(wmsPickTicketDetail.getUserField9());
				newWmsPickTicketDetail.setUserField10(wmsPickTicketDetail.getUserField10());
				newWmsPickTicketDetail.setUserField11(wmsPickTicketDetail.getUserField11());
				newWmsPickTicketDetail.setUserField12(wmsPickTicketDetail.getUserField12());
				newWmsPickTicketDetail.setUserField13(wmsPickTicketDetail.getUserField13());
				newWmsPickTicketDetail.setUserField14(wmsPickTicketDetail.getUserField14());
				newWmsPickTicketDetail.setUserField15(wmsPickTicketDetail.getUserField15());
				newWmsPickTicketDetail.setUserField16(wmsPickTicketDetail.getUserField16());
				newWmsPickTicketDetail.setUserField17(wmsPickTicketDetail.getUserField17());
				newWmsPickTicketDetail.setUserField18(wmsPickTicketDetail.getUserField18());
				newWmsPickTicketDetail.setUserField19(wmsPickTicketDetail.getUserField19());
				lineNo += 1;
				this.commonDao.store(newWmsPickTicketDetail);
				
				/**带入批次信息*/
				newRequire(wmsPickTicketDetail.getId(), newWmsPickTicketDetail);
				
				//newWmsPickTicketDetail 为新仓库生成的单子 wmsPickTicketDetail为原始明细
				//从老的 上面转移 expectedQty 到 新的上面  如果为0 则删除
				Double dealQty = expectedQty;
				if(null != billCode && billCode.equals(WmsPickticketGenType.SCLLD)){//生产领料单
					String hql = " select p from ProductionOrderDetailPtDetail p where p.pickticketDetail=:oldptd order by p.productionOrderDetail.id asc,p.quantityBu asc";
					List<ProductionOrderDetailPtDetail> ps = commonDao.findByQuery(hql,new String[]{"oldptd"},new Object[]{wmsPickTicketDetail}) ;
					for(ProductionOrderDetailPtDetail p : ps) {
						if(dealQty<=0) {
							break;
						}
						
						if(p.getQuantityBu()<=dealQty) {
							p.setPickticketDetail(newWmsPickTicketDetail);
							dealQty=dealQty-p.getQuantityBu();
						}
						else if(p.getQuantityBu()>dealQty) {
							p.setQuantityBu(p.getQuantityBu()-dealQty);
							commonDao.store(p);
							ProductionOrderDetailPtDetail newp = new ProductionOrderDetailPtDetail();
							newp.setUnit(p.getUnit());;
							newp.setProductionOrderDetail(p.getProductionOrderDetail());
							newp.setPickticketDetail(newWmsPickTicketDetail);
							newp.setQuantityBu(dealQty);
							commonDao.store(newp);
						}
					}
				}else if(null != billCode && billCode.equals(WmsPickticketGenType.YLCKD)){
					String hql = "from ReservedOrderDetailPtDetail p where p.pickticketDetail=:oldptd order by p.reservedOrderDetail.id asc,p.quantityBu asc";
					List<ReservedOrderDetailPtDetail> ps = commonDao.findByQuery(hql,new String[]{"oldptd"},new Object[]{wmsPickTicketDetail}) ;
					for(ReservedOrderDetailPtDetail p : ps) {
						if(dealQty<=0) {
							break;
						}
						
						if(p.getQuantityBu()<=dealQty) {
							p.setPickticketDetail(newWmsPickTicketDetail);
							dealQty=dealQty-p.getQuantityBu();
						}
						else if(p.getQuantityBu()>dealQty) {
							p.setQuantityBu(p.getQuantityBu()-dealQty);
							commonDao.store(p);
							ReservedOrderDetailPtDetail newp = new ReservedOrderDetailPtDetail();
							newp.setUnit(p.getUnit());;
							newp.setReservedOrderDetail(p.getReservedOrderDetail());
							newp.setPickticketDetail(newWmsPickTicketDetail);
							newp.setQuantityBu(dealQty);
							commonDao.store(newp);
						}
					}
				}
				
				
			}
		}
		return newPickTicket;
	}
	
	/**转换仓库 获取目的仓库的库位 fs*/
	public WmsLocation findLocationByWareHouse(Long wareHouseId){
		List<WmsLocation> locations = commonDao.findByQuery("from WmsLocation w "
				+ "where w.code='备货库位' and status='ENABLED' and w.warehouse.id="+wareHouseId);
		if(locations.size() <= 0){
			throw new BusinessException("目的仓库没有维护备货库位,请检查!!");
		}
		return locations.get(0);
	}
	/**批次信息带到新的拣货明细上 fs*/
	public void newRequire(Long oldId,WmsPickTicketDetail newDetail){
		String hql = "from WmsPickTicketDetailRequire r where r.pickTicketDetail.id=:id";
		List<WmsPickTicketDetailRequire> pdr = commonDao.findByQuery(hql,"id",oldId);
		for(WmsPickTicketDetailRequire w : pdr){
			WmsPickTicketDetailRequire newRequire = new WmsPickTicketDetailRequire();
			newRequire.setPickTicketDetail(newDetail);
			newRequire.setLotKey(w.getLotKey());
			newRequire.setLotValue1(w.getLotValue1());
			newRequire.setLotValue2(w.getLotValue2());
			newRequire.setLotValue3(w.getLotValue3());
			newRequire.setLotValue4(w.getLotValue4());
			newRequire.setLotValue5(w.getLotValue5());
			newRequire.setQueryRequire(w.getQueryRequire());
			newRequire.setLevel(w.getLevel());
			newRequire.setAllowModified(w.getAllowModified());
			commonDao.store(newRequire);
		}
	}
	/**
	 * 当前仓库生成拣货单，作为原始数据保存
	 * @param wmsPickTicket
	 * @param wh
	 * @param supplyWarehouse
	 * @return
	 */
	private WmsPickTicket createCarrenPickTicket(WmsPickTicket wmsPickTicket, WmsWarehouse wh) {
		//当前仓库新拣货单
		WmsPickTicket currentNewPickTicket = new WmsPickTicket();
		currentNewPickTicket.setWarehouse(wh);
		WmsBillType wmsBillType = this.commonDao.load(WmsBillType.class, wmsPickTicket.getBillType().getId());
		WmsCompany wmsCompany = this.commonDao.load(WmsCompany.class, wmsPickTicket.getCompany().getId());
		String currentNewPickTicketCode = wmsBussinessCodeManager.generateCodeByRule(wh, wmsBillType.getCode());
		currentNewPickTicket.setCode(currentNewPickTicketCode);
		currentNewPickTicket.setCompany(wmsCompany);
		currentNewPickTicket.setBillType(wmsBillType);
		//不可执行
		currentNewPickTicket.setIsExecutable(Boolean.FALSE);
		//是否原始单据号为是
		currentNewPickTicket.setIsOriginal(Boolean.TRUE);
		//锁单
		currentNewPickTicket.setIsHold(wmsPickTicket.getIsHold());
		//打开状态
		currentNewPickTicket.setStatus(WmsPickTicketStatus.CLOSED);
		currentNewPickTicket.setRelatedBill1(wmsPickTicket.getRelatedBill1());
		currentNewPickTicket.setRelatedBill2(wmsPickTicket.getRelatedBill2());
		currentNewPickTicket.setRelatedBill3(wmsPickTicket.getRelatedBill3());
		currentNewPickTicket.setCustomer(wmsPickTicket.getCustomer());
		currentNewPickTicket.setShipToName(wmsPickTicket.getShipToName());
		currentNewPickTicket.setContact(wmsPickTicket.getContact());
		currentNewPickTicket.setOrderDate(wmsPickTicket.getOrderDate());
		currentNewPickTicket.setPriority(wmsPickTicket.getPriority());
		currentNewPickTicket.setIntendShipDate(wmsPickTicket.getIntendShipDate());
		currentNewPickTicket.setExpectedPickFinishDate(wmsPickTicket.getExpectedPickFinishDate());
		currentNewPickTicket.setFinshDate(wmsPickTicket.getFinshDate());
		currentNewPickTicket.setDescription(wmsPickTicket.getDescription());
		currentNewPickTicket.setShipDock(wmsPickTicket.getShipDock());
		currentNewPickTicket.setShipLocation(wmsPickTicket.getShipLocation());
		currentNewPickTicket.setCarrier(wmsPickTicket.getCarrier());
		currentNewPickTicket.setRequireArriveDate(wmsPickTicket.getRequireArriveDate());
		currentNewPickTicket.setAllowShortShip(wmsPickTicket.getAllowShortShip());
		currentNewPickTicket.setUserField1(wmsPickTicket.getUserField1());
		currentNewPickTicket.setUserField2(wmsPickTicket.getUserField2());
		currentNewPickTicket.setUserField3(wmsPickTicket.getUserField3());
		currentNewPickTicket.setUserField4(wmsPickTicket.getUserField4());
		currentNewPickTicket.setUserField5(wmsPickTicket.getUserField5());
		currentNewPickTicket.setUserField6(wmsPickTicket.getUserField6());
		currentNewPickTicket.setUserField7(wmsPickTicket.getUserField7());
		currentNewPickTicket.setUserField8(wmsPickTicket.getUserField8());
		currentNewPickTicket.setUserField9(wmsPickTicket.getUserField9());
		currentNewPickTicket.setUserField10(wmsPickTicket.getUserField10());
		currentNewPickTicket.setUserField11(wmsPickTicket.getUserField11());
		currentNewPickTicket.setUserField12(wmsPickTicket.getUserField12());
		currentNewPickTicket.setUserField13(wmsPickTicket.getUserField13());
		currentNewPickTicket.setUserField14(wmsPickTicket.getUserField14());
		currentNewPickTicket.setUserField15(wmsPickTicket.getUserField15());
		currentNewPickTicket.setUserField16(wmsPickTicket.getUserField16());
		currentNewPickTicket.setUserField17(wmsPickTicket.getUserField17());
		currentNewPickTicket.setUserField18(wmsPickTicket.getUserField18());
		currentNewPickTicket.setUserField19(wmsPickTicket.getUserField19());
		currentNewPickTicket.setUserField20(wmsPickTicket.getUserField20());
		currentNewPickTicket.setUserField21(wmsPickTicket.getUserField21());
		currentNewPickTicket.setUserField22(wmsPickTicket.getUserField22());
		currentNewPickTicket.setUserField23(wmsPickTicket.getUserField23());
		currentNewPickTicket.setUserField24(wmsPickTicket.getUserField24());
		currentNewPickTicket.setAllowCross(wmsPickTicket.getAllowCross());
		currentNewPickTicket.setRoute(wmsPickTicket.getRoute());
		currentNewPickTicket.setAllowLotSwap(wmsPickTicket.getAllowLotSwap());
		currentNewPickTicket.setWaitReplenish(wmsPickTicket.getWaitReplenish());
		//计划数量
		currentNewPickTicket.setQty(wmsPickTicket.getQty());
		currentNewPickTicket.setAllocateQty(0D);
		//保存原拣货单
		commonDao.store(currentNewPickTicket);
		//拣货明细清单
		Set<WmsPickTicketDetail> detailSets = wmsPickTicket.getDetails();
		//排序
		List<WmsPickTicketDetail> details = new ArrayList<WmsPickTicketDetail>(detailSets);
		Collections.sort(details, new Comparator() {
	        @Override
	        public int compare(Object o1, Object o2) {
	        	WmsPickTicketDetail d1 = (WmsPickTicketDetail)o1;
	        	WmsPickTicketDetail d2 = (WmsPickTicketDetail)o2;
	            if(d1.getId() > d2.getId()) {
	                return 1;
	            } else if(d1.getId() == d2.getId()) {
	                return 0;
	            } else {
	                return -1;
	            }
	        }       
		});
		for (WmsPickTicketDetail wmsPickTicketDetail : details) {
			WmsPickTicketDetail currentWmsPickTicketDetail = new WmsPickTicketDetail();
			WmsItem wmsItem = this.commonDao.load(WmsItem.class, wmsPickTicketDetail.getItem().getId());
			WmsPackageUnit wmsPackageUnit = this.commonDao.load(WmsPackageUnit.class, wmsPickTicketDetail.getPackageUnit().getId());
			currentWmsPickTicketDetail.setPickTicket(currentNewPickTicket);
			currentWmsPickTicketDetail.setLineNo(wmsPickTicketDetail.getLineNo());
			currentWmsPickTicketDetail.setItem(wmsItem);
			currentWmsPickTicketDetail.setInventoryStatus(wmsPickTicketDetail.getInventoryStatus());
			currentWmsPickTicketDetail.setPackageUnit(wmsPackageUnit);
			currentWmsPickTicketDetail.setExpectedPackQty(wmsPickTicketDetail.getExpectedPackQty());
			currentWmsPickTicketDetail.setExpectedQty(wmsPickTicketDetail.getExpectedQty());
			currentWmsPickTicketDetail.setAllocatedQty(0D);
			currentWmsPickTicketDetail.setPickedQty(0D);
			currentWmsPickTicketDetail.setPlanedShipQty(0D);
			currentWmsPickTicketDetail.setShippedQty(0D);
			currentWmsPickTicketDetail.setFullpackAllocation(wmsPickTicketDetail.getFullpackAllocation());
			currentWmsPickTicketDetail.setOverpickRate(wmsPickTicketDetail.getOverpickRate());
			currentWmsPickTicketDetail.setUserField1(wmsPickTicketDetail.getUserField1());
			currentWmsPickTicketDetail.setUserField2(wmsPickTicketDetail.getUserField2());
			currentWmsPickTicketDetail.setUserField3(wmsPickTicketDetail.getUserField3());
			currentWmsPickTicketDetail.setUserField4(wmsPickTicketDetail.getUserField4());
			currentWmsPickTicketDetail.setUserField5(wmsPickTicketDetail.getUserField5());
			currentWmsPickTicketDetail.setUserField6(wmsPickTicketDetail.getUserField6());
			currentWmsPickTicketDetail.setUserField7(wmsPickTicketDetail.getUserField7());
			currentWmsPickTicketDetail.setUserField8(wmsPickTicketDetail.getUserField8());
			currentWmsPickTicketDetail.setUserField9(wmsPickTicketDetail.getUserField9());
			currentWmsPickTicketDetail.setUserField10(wmsPickTicketDetail.getUserField10());
			currentWmsPickTicketDetail.setUserField11(wmsPickTicketDetail.getUserField11());
			currentWmsPickTicketDetail.setUserField12(wmsPickTicketDetail.getUserField12());
			currentWmsPickTicketDetail.setUserField13(wmsPickTicketDetail.getUserField13());
			currentWmsPickTicketDetail.setUserField14(wmsPickTicketDetail.getUserField14());
			currentWmsPickTicketDetail.setUserField15(wmsPickTicketDetail.getUserField15());
			currentWmsPickTicketDetail.setUserField16(wmsPickTicketDetail.getUserField16());
			currentWmsPickTicketDetail.setUserField17(wmsPickTicketDetail.getUserField17());
			currentWmsPickTicketDetail.setUserField18(wmsPickTicketDetail.getUserField18());
			currentWmsPickTicketDetail.setUserField19(wmsPickTicketDetail.getUserField19());
			commonDao.store(currentWmsPickTicketDetail);
			
			/**带入批次信息*/
			newRequire(wmsPickTicketDetail.getId(), currentWmsPickTicketDetail);
		}
		return currentNewPickTicket;
	}
	/**
	 * 删除分配数量为0的拣货单明细
	 * @param wmsPickTicket
	 */
	private void deleteCurrentPickTicketDetail(WmsPickTicket wmsPickTicket) {
		//拣货明细清单
		Set<WmsPickTicketDetail> detailSets = wmsPickTicket.getDetails();
		//排序
		List<WmsPickTicketDetail> details = new ArrayList<WmsPickTicketDetail>(detailSets);
		Collections.sort(details, new Comparator() {
	        @Override
	        public int compare(Object o1, Object o2) {
	        	WmsPickTicketDetail d1 = (WmsPickTicketDetail)o1;
	        	WmsPickTicketDetail d2 = (WmsPickTicketDetail)o2;
	            if(d1.getId() > d2.getId()) {
	                return 1;
	            } else if(d1.getId() == d2.getId()) {
	                return 0;
	            } else {
	                return -1;
	            }
	        }       
		});
		Double allocatedQtyTatol = 0D;
		for (WmsPickTicketDetail wmsPickTicketDetail : details) {
			if(wmsPickTicketDetail.getAllocatedQty() == 0) {
				String hql = "delete from WmsPickTicketDetailRequire where pickTicketDetail=:pickTicketDetail";
				
				commonDao.executeByHql(hql, "pickTicketDetail", wmsPickTicketDetail);
				//删除
				this.commonDao.delete(wmsPickTicketDetail);
				wmsPickTicket.getDetails().remove(wmsPickTicketDetail);
			} else {
				WmsItem wmsItem = this.commonDao.load(WmsItem.class, wmsPickTicketDetail.getItem().getId());
				wmsPickTicketDetail.setItem(wmsItem);
				//单位
				WmsPackageUnit wmsPackageUnit = this.commonDao.load(WmsPackageUnit.class, wmsPickTicketDetail.getPackageUnit().getId());
				//件装量
				Double convertFigure = wmsPackageUnit.getConvertFigure();
				//期待包装数量： 新期待数量/折算系数(取货品基本单位精度)
				Double expectedPackQty = DoubleUtils.round(wmsPickTicketDetail.getAllocatedQty() / convertFigure, wmsItem.getBuPrecision());
				wmsPickTicketDetail.setExpectedPackQty(expectedPackQty);
				//修改期待数量为分配数量
				wmsPickTicketDetail.setExpectedQty(wmsPickTicketDetail.getAllocatedQty());
				allocatedQtyTatol += wmsPickTicketDetail.getAllocatedQty();
				this.commonDao.store(wmsPickTicketDetail);
			}
		}
		//是否原始单据为否
		wmsPickTicket.setIsOriginal(Boolean.FALSE);
		//设置数量为分配数量
		wmsPickTicket.setQty(allocatedQtyTatol);
	}
	
	
	public void storePickTicket(WmsPickTicket pickTicket) {
		super.storePickTicket(pickTicket);

		if(StringUtils.isEmpty(pickTicket.getUserField1())){
			throw new BusinessException("出库工厂属性必填,不能为空");
		}
		//调拨出库单
		if(WmsPickticketBillTypeCode.DBCKD.equals(pickTicket.getBillType().getCode())){
			if(StringUtils.isEmpty(pickTicket.getUserField2())){
				throw new BusinessException("调拨出库单：入库工厂属性必填,不能为空");
			}
			 
			//收货人必须是仓库。
			if(pickTicket.getCustomer()==null || pickTicket.getCustomer().getWarehouse()==null) {
				throw new BusinessException("调拨出库单：收货人不能为空且必须是仓库");
			}
			
			String wareHql = "FROM WmsWarehouse house where house.baseOrganization.id=:hbi and house.status='ENABLED'";
			WmsWarehouse warehouse = (WmsWarehouse)commonDao.findByQueryUniqueResult(wareHql, "hbi",BaseOrganizationHolder.getThornBaseOrganization().getId());
			if(null==warehouse){
				throw new RfBusinessException("没有找到对应仓库!!");
			}
			
			
			if(pickTicket.getCustomer().getWarehouse().getId().equals(warehouse.getId())) {//选择的收货人是当前仓库
				if(!"VMI".equals(pickTicket.getCustomer().getWarehouse().getCode())) { //必须是vmi
					throw new BusinessException("收货人选择错误");
				}
				
				if(StringHelper.in(pickTicket.getUserField1(), new String[]{"2000","2100"})  && 
						StringHelper.in(pickTicket.getUserField2(), new String[]{"2000","2100"}) )  {
					throw new BusinessException("调拨出库单：出库工厂与入库工厂不能同属于一工厂");
				 
				}
				if(StringHelper.in(pickTicket.getUserField2(), new String[]{"2000","2100"})  && 
						StringHelper.in(pickTicket.getUserField1(), new String[]{"2000","2100"}) )  {
					throw new BusinessException("调拨出库单：出库工厂与入库工厂不能同属于一工厂");
				}
			}
			else {//选择的收货人不是当前仓库 则是跨仓库  跨仓库不控制工厂
			}
			
			//收货人必须有入库工厂
			String hql = "from WmsFactoryWarehouse w where w.factory.code=:factoryCode and w.warehouse=:warehouse";
			List<WmsFactoryWarehouse> fs = commonDao.findByQuery(hql,new String[]{"factoryCode","warehouse"},new Object[]{pickTicket.getUserField2(),pickTicket.getCustomer().getWarehouse()});
			if(fs.isEmpty()) {
				throw new BusinessException("收货人"+pickTicket.getCustomer().getName()+"下无选择的入库工厂");
			}
			
		}
		if(WmsPickticketBillTypeCode.TGYSCK.equals(pickTicket.getBillType().getCode())) { //退供应商出库单
			if(pickTicket.getSupplier()==null) {
				throw new BusinessException("退供应商出库单：供应商不能为空");
			}
		}
		
	}
	/**
	 * 添加拣货单明细
	 * @Description:
	 * @Author:        <a href="yang.liu@vtradex.net">刘杨</a>
	 * @CreateDate:    2015年12月14日
	 * @param pickTicketId
	 * @param pickTicketDetail
	 * @param status:
	 * @arithMetic:
	 * @exception:
	 */
	public void addPickTicketDetail(Long pickTicketId,
			WmsPickTicketDetail pickTicketDetail) {
		super.addPickTicketDetail(pickTicketId, pickTicketDetail);
		
		//增加
		WmsPickTicketDetailRequire ptdr = EntityFactory.getEntity(WmsPickTicketDetailRequire.class);
		WmsPickTicket pickTicket = commonDao.load(WmsPickTicket.class, pickTicketId);
		
		if(WmsPickticketBillTypeCode.DBCKD.equals(pickTicketDetail.getPickTicket().getBillType().getCode())){
			String hql = "FROM WmsItemFactory w WHERE w.factory.code =:code AND w.item.id =:id";
			String hql1 = "FROM WmsItemFactory w WHERE w.factory.code =:code AND w.item.id =:id";
			
			List<WmsItemFactory>  list = commonDao.findByQuery(hql, new String[]{"code","id"}, new Object[]{pickTicket.getUserField1(),pickTicketDetail.getItem().getId()});
			List<WmsItemFactory>  list1 = commonDao.findByQuery(hql, new String[]{"code","id"}, new Object[]{pickTicket.getUserField2(),pickTicketDetail.getItem().getId()});
		    if(list.size() == 0 || list1.size() == 0){
		    	throw new BusinessException(pickTicketDetail.getItem().getName()+"在工厂编码为"+pickTicket.getUserField1()+"与"+pickTicket.getUserField2()+"中没有同时存在");
		    }
		
		}
		
		
		ptdr.setPickTicketDetail(pickTicketDetail);
		ptdr.setLotKey("EXTEND_PROPC10"); //批次属性
		if(StringHelper.isNullOrEmpty(pickTicketDetail.getPickTicket().getUserField1())) {
			throw new BusinessException("拣配单工厂编码不能为空");
		}
		ptdr.setLotValue1(pickTicketDetail.getPickTicket().getUserField1()); //工厂编码
		ptdr.setQueryRequire(WmsSOQueryRequireType.E); //等于
		ptdr.setLevel(WmsLotCategoryType.FORCEMATCHED);//等级
		ptdr.setAllowModified(false); //不允许修改
		
		commonDao.store(ptdr);
		
		
		if(WmsPickticketBillTypeCode.TGYSCK.equals(pickTicketDetail.getPickTicket().getBillType().getCode())) {//退供应商出库
			if(pickTicketDetail.getPickTicket().getSupplier()==null) {
				throw new BusinessException("退供应商出库单供应商不能为空");
			}
			
			WmsPickTicketDetailRequire ptdr2 = EntityFactory.getEntity(WmsPickTicketDetailRequire.class);
			ptdr2.setPickTicketDetail(pickTicketDetail);
			ptdr2.setLotKey("SUPPLIER_CODE"); //批次属性
			ptdr2.setLotValue1(pickTicketDetail.getPickTicket().getSupplier().getCode()); //供应商编码
			ptdr2.setQueryRequire(WmsSOQueryRequireType.E); //等于
			ptdr2.setLevel(WmsLotCategoryType.FORCEMATCHED);//等级
			ptdr2.setAllowModified(false); //不允许修改
			
			commonDao.store(ptdr2);
			
		}
	}
	public void createWorkDoc(Object obj) {
		super.createWorkDoc(obj);
		
		if(obj instanceof WmsPickTicket){
			WmsPickTicket pickTicket = (WmsPickTicket)obj;
			String hql = "select id from WmsWorkDoc w where "
					+ "w.relatedBillCode=:relatedBillCode and w.status=:status";
			
			Long workDocId = (Long) commonDao.findByQueryUniqueResult(hql,
					new String[]{"relatedBillCode","status"},
					new Object[]{pickTicket.getCode(),WmsWorkDocStatus.ENABLED});
			hql = "from WmsTask w where w.workDoc.id=:workDocID";
			List<WmsTask> tasks = commonDao.findByQuery(hql,"workDocID",workDocId);
			for(WmsTask task : tasks){
				/**XB库位自动作业确认*/
				if(null != task.getFromLocation().getCode() 
						&& task.getFromLocation().getCode().equals(WmsLocationCode.XB)){
					
					WmsItem item = commonDao.load(WmsItem.class, task.getItem().getId());
					Double qty = DoubleUtils.sub(task.getPlanQty(),task.getPutawayQty(),item.getBuPrecision()); 
					
					WmsTclWorkDocManager tclWorkDocManager = (WmsTclWorkDocManager) applicationContext.getBean("wmsTclWorkDocManager");
					Long workId = task.getWorker() == null ? null : task.getWorker().getId();
					tclWorkDocManager.singleWorkConfirm(task, task, qty, workId);
				}
			}
		}
	}
}
