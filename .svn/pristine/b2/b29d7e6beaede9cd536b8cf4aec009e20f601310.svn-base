package com.vtradex.wms.rfserver.service.delivery.pojo;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang3.StringUtils;

import com.vtradex.rf.common.RfConstant;
import com.vtradex.rf.common.exception.RfBusinessException;
import com.vtradex.thorn.server.model.EntityFactory;
import com.vtradex.thorn.server.model.security.ThornRole;
import com.vtradex.thorn.server.model.security.ThornUser;
import com.vtradex.thorn.server.service.pojo.DefaultBaseManager;
import com.vtradex.thorn.server.service.security.UserManager;
import com.vtradex.thorn.server.web.security.BaseOrganizationHolder;
import com.vtradex.thorn.server.web.security.UserHolder;
import com.vtradex.wms.rfserver.service.delivery.TclRfDeliveryManager;
import com.vtradex.wms.server.helper.WmsBarCodeParse;
import com.vtradex.wms.server.model.entity.base.WmsBarCodeRepPrintRecord;
import com.vtradex.wms.server.model.entity.base.WmsCustomer;
import com.vtradex.wms.server.model.entity.bol.WmsBol;
import com.vtradex.wms.server.model.entity.bol.WmsBolDetail;
import com.vtradex.wms.server.model.entity.bol.WmsBolType;
import com.vtradex.wms.server.model.entity.item.WmsItem;
import com.vtradex.wms.server.model.entity.pickticket.WmsPickTicket;
import com.vtradex.wms.server.model.entity.pickticket.WmsPickTicketDetail;
import com.vtradex.wms.server.model.entity.receiving.WmsASNDetail;
import com.vtradex.wms.server.model.entity.warehouse.WmsWarehouse;
import com.vtradex.wms.server.model.entity.workdoc.WmsTask;
import com.vtradex.wms.server.model.entity.workdoc.WmsWorkDoc;
import com.vtradex.wms.server.model.enums.WmsWorkDocStatus;
import com.vtradex.wms.server.service.bol.WmsBolManager;
import com.vtradex.wms.server.service.bol.WmsTclBolManager;
import com.vtradex.wms.server.service.workdoc.WmsTclWorkDocManager;
import com.vtradex.wms.server.utils.StringHelper;
@SuppressWarnings("rawtypes")
public class DefaultTclRfDeliveryManager extends DefaultBaseManager implements TclRfDeliveryManager{
	
	protected WmsBolManager bolManager;
	
	protected WmsTclBolManager tclbolManager;
	
	protected WmsTclWorkDocManager tclworkDocManager;
	
	protected UserManager userManager;
	
	public DefaultTclRfDeliveryManager(WmsBolManager bolManager,WmsTclBolManager tclbolManager,WmsTclWorkDocManager tclworkDocManager,UserManager userManager) {
		this.bolManager = bolManager;
		this.tclbolManager = tclbolManager;
		this.tclworkDocManager = tclworkDocManager;
		this.userManager = userManager;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map deliveryInfo(Map deliveryMap) throws RfBusinessException {
		Long cusId = new Long(deliveryMap.get("id").toString().trim());
		WmsCustomer cus = commonDao.load(WmsCustomer.class,cusId);
		if(null!=cus){
			deliveryMap.put("receiver", cus.getName());
			deliveryMap.put(RfConstant.FORWARD_VALUE, RfConstant.FORWARD_SUCCESS);
		}
		return deliveryMap;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map createBol(Map deliveryMap) throws RfBusinessException {
		Long cusId = new Long(deliveryMap.get("id").toString().trim());
		
		String fi = deliveryMap.get("followInput").toString().trim();
		if(null!=cusId){
			WmsCustomer cus = commonDao.load(WmsCustomer.class,cusId);
			WmsBol bol = EntityFactory.getEntity(WmsBol.class);
			bol.setCustomer(cus);
			bol.setCustomerWarehouseId(cus.getWarehouse().getId());//收货人仓库
			bol.setType(WmsBolType.VMI);
			bol.setExpectedDeliveryTime(new Date());
			if(!StringHelper.isNullOrEmpty(fi)){
				bol.setContainerCode(fi);//跟踪号
			}
			bolManager.storeBOL(bol);
			deliveryMap.put(RfConstant.ENTITY_ID, bol.getId());
			deliveryMap.put("bolCode", bol.getCode());
			deliveryMap.put("receiver", cus.getName());
			deliveryMap.put(RfConstant.FORWARD_VALUE, RfConstant.FORWARD_SUCCESS);
		}
		return deliveryMap;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map showDetail(Map deliveryMap) throws RfBusinessException {
		Long bolId = new Long(deliveryMap.get("id").toString().trim());
		WmsBol bol = commonDao.load(WmsBol.class, bolId);
		deliveryMap.put("bolCode", bol.getCode());
		WmsCustomer cus = commonDao.load(WmsCustomer.class, bol.getCustomer().getId());
		deliveryMap.put("receiver", cus.getName());
		WmsWarehouse house = commonDao.load(WmsWarehouse.class, cus.getWarehouse().getId());
		deliveryMap.put("warehouseId", house.getId()+"");
		deliveryMap.put(RfConstant.ENTITY_ID, bol.getId());
		deliveryMap.put(RfConstant.FORWARD_VALUE, RfConstant.FORWARD_SUCCESS);
		return deliveryMap;
	}
	@SuppressWarnings("unchecked")
	@Override
	public Map bolInfo(Map deliveryMap) throws RfBusinessException {
		Long bolId = new Long(deliveryMap.get("id").toString().trim());
		WmsBol bol = commonDao.load(WmsBol.class, bolId);
		deliveryMap.put(RfConstant.ENTITY_ID, bol.getId());
		deliveryMap.put("bolCode", bol.getCode());
		WmsCustomer cus = commonDao.load(WmsCustomer.class, bol.getCustomer().getId());
		deliveryMap.put("receiver", cus.getName());
		deliveryMap.put(RfConstant.FORWARD_VALUE, RfConstant.FORWARD_SUCCESS);
		return deliveryMap;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map pickInfo(Map deliveryMap) throws RfBusinessException {
		Long bdId = new Long(deliveryMap.get("id").toString().trim());
		WmsBolDetail wbd = commonDao.load(WmsBolDetail.class, bdId);
		String flag = deliveryMap.get("full")==null?"":deliveryMap.get("full").toString().trim();
		if("Y".equals(flag)){
			deliveryMap.put(RfConstant.FORWARD_VALUE, RfConstant.FORWARD_SUCCESS);
			return deliveryMap;
		}
		if(null!=wbd){
			WmsPickTicketDetail detail = commonDao.load(WmsPickTicketDetail.class, wbd.getPickTicketDetail().getId());
			WmsPickTicket wpt = commonDao.load(WmsPickTicket.class, detail.getPickTicket().getId());
			String pickCode = wpt.getCode();
			WmsItem item = commonDao.load(WmsItem.class, detail.getItem().getId());
			String itemCode = item.getCode();
			String itemName = item.getName();
			String qty = wbd.getPickedQty()+"";
			deliveryMap.put(RfConstant.ENTITY_ID, wbd.getId());
			deliveryMap.put("pcode",	 pickCode);
			deliveryMap.put("itemCode",itemCode);
			deliveryMap.put("itemName",itemName);
			deliveryMap.put("qty",qty);
			deliveryMap.put(RfConstant.FORWARD_VALUE, RfConstant.FORWARD_SUCCESS);
		}
		return deliveryMap;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map addDetail(Map deliveryMap) throws RfBusinessException {
		Long bdId = new Long(deliveryMap.get("id").toString().trim());
		Double qty = 0d;
		try {
			qty = new Double(deliveryMap.get("qtyInput").toString().trim());//数量
		} catch (Exception e) {
			e.printStackTrace();
			throw new RfBusinessException("数量格式输入有误!!");
		}
		String bolCode = deliveryMap.get("bolCode").toString().trim();
		WmsBol bol = (WmsBol)commonDao.findByQueryUniqueResult("FROM WmsBol bol where bol.code=:bc", "bc",bolCode);
		bol = commonDao.load(WmsBol.class, bol.getId());
		WmsBolDetail wwd = commonDao.load(WmsBolDetail.class, bdId);
		
		String barCode =  deliveryMap.get("itemInput").toString().trim();//货品条码
		if(StringUtils.isEmpty(barCode)){
			throw new RfBusinessException("条码不能为空");
		}
		if(-1==barCode.indexOf("_")){
			throw new RfBusinessException("条码格式不正确");
		}
		Map map = WmsBarCodeParse.parse(barCode);
		String itemCode = map.get(WmsBarCodeParse.KEY_ITEMCODE).toString().trim();
		WmsItem item = (WmsItem)commonDao.findByQueryUniqueResult("FROM WmsItem item where item.code=:ic", "ic", itemCode);
		if(null==item){
			throw new RfBusinessException("货品不存在!!");
		}
		List tem = new ArrayList();
		tem.add(qty);
		tclbolManager.addBOLDetail(bol.getId(), wwd, tem);
		if(wwd.getPickedQty()==qty){
			deliveryMap.put("full","Y");
		}
		deliveryMap.put(RfConstant.ENTITY_ID, wwd.getId());
		deliveryMap.put(RfConstant.FORWARD_VALUE, RfConstant.FORWARD_SUCCESS);
		return deliveryMap;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map showDetails(Map deliveryMap) throws RfBusinessException {
		Map<String, Object> perResult = new HashMap<String, Object>();
		
		perResult.putAll(deliveryMap);
		perResult.put(RfConstant.ENTITY_ID, "");
		
		deliveryMap.put(RfConstant.FORWARD_VALUE, RfConstant.FORWARD_SUCCESS);
		//清除部分值
		deliveryMap.put(RfConstant.CLEAR_VALUE, Boolean.TRUE);
		perResult.put("itemInput", null);
		perResult.put("qtyInput", null);
		deliveryMap.put(RfConstant.PERSISTENT_VALUE, perResult);//将持久map放入返回map中
		return deliveryMap;//返回原map
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map checkCode(Map deliveryMap) throws RfBusinessException {
		String barcode = null;
		if(null!=deliveryMap.get("barCodeInput")){
			barcode = deliveryMap.get("barCodeInput").toString().trim();//货品条码
			Map map = WmsBarCodeParse.parse(barcode);
			String itemCode = (String)map.get(WmsBarCodeParse.KEY_ITEMCODE);
			WmsItem item = (WmsItem)commonDao.findByQueryUniqueResult("FROM WmsItem item where item.code=:ic", "ic", itemCode);
			if(null==item){
				throw new RfBusinessException("物料条码不存在!!");
			}
			String info = map.get(WmsBarCodeParse.KEY_LOTNO).toString().trim();
			boolean flag = checkInfo(info);
			String detaId = map.get(WmsBarCodeParse.KEY_ASN_DETAIL_ID).toString().trim();
			if(!flag){
				throw new RfBusinessException("条码格式不正确!!");
			}else{
				WmsBarCodeRepPrintRecord barRecord = EntityFactory.getEntity(WmsBarCodeRepPrintRecord.class);
				String wareHql = "FROM WmsWarehouse house where house.baseOrganization.id=:hbi and house.status='ENABLED'";
				WmsWarehouse house = (WmsWarehouse)commonDao.findByQueryUniqueResult(wareHql, "hbi",BaseOrganizationHolder.getThornBaseOrganization().getId());
				if(null==house){
					throw new RfBusinessException("没有找到对应仓库!!");
				}
				barRecord.setWarehouse(house);
				barRecord.setItem(item);
				barRecord.setLotkey(info);
				barRecord.setBarcode(barcode);
				WmsASNDetail detail =null;
				if(null!=detaId){
					detail = commonDao.load(WmsASNDetail.class, Long.valueOf(detaId));
					if(null==detail){
						throw new RfBusinessException("Asn明细不存在!!");
					}
				}
				barRecord.setWmsASNDetail(detail);
				barRecord.setInsertTime(new Date());
				barRecord.setRfUser(UserHolder.getUser().getName());
				barRecord.setMinPackageQty(Double.valueOf(detail.getLotInfo().getExtendPropC12()));//最小包装量
				commonDao.store(barRecord);
				deliveryMap.put(RfConstant.CLEAR_VALUE, Boolean.TRUE);
				deliveryMap.put(RfConstant.FORWARD_VALUE, RfConstant.FORWARD_SUCCESS);
			}
		}
		return deliveryMap;
	}

	@SuppressWarnings("unused")
	private boolean checkInfo(String info) {
		String yy = info.substring(0,4);
		String mm = info.substring(4,6);
		String ls = info.substring(6,info.length());
		Integer yt =null;
		Integer mt =null;
		Integer dt =null;
		Integer ld =null;
		try {
			yt = Integer.valueOf(yy);
			mt = Integer.valueOf(mm);
		} catch (Exception e) {
			e.printStackTrace();
			throw new RfBusinessException("输入不合法!!");
		}
		if(yt<1900 ||yt>2100){
			throw new RfBusinessException("年份维护异常!");
		}
		if(mt<0||mt>12){
			throw new RfBusinessException("月份维护异常!!");
		}
		return true;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map deliveryCodeInputCommit(Map deliveryMap)throws RfBusinessException {
		if(null!=deliveryMap.get("deliveryCodeInput")){
			String qcode = deliveryMap.get("deliveryCodeInput").toString().trim();
			if(!StringHelper.isNullOrEmpty(qcode)){
				WmsWorkDoc wwd = (WmsWorkDoc)commonDao.findByQueryUniqueResult("FROM  WmsWorkDoc wwd where wwd.code=:wc", "wc", qcode);
				if(null==wwd){
					throw new RfBusinessException("未找到对应的交货出库单!!");
				}
				List<Object[]> details = checkShip(wwd,Boolean.TRUE);
				StringBuffer itemInfoStr = new StringBuffer();
				for(int i = 0;i <details.size();i++){
//					物料代码：
//					物料名称：
//					数量:
					Object[] detail = details.get(i);
					String itemCode = detail[0].toString();
					itemInfoStr.append("物料代码:").append(itemCode).append("\n");
					String itemName = detail[1].toString();
					itemInfoStr.append("物料名称:").append(itemName).append("\n");
					Double expectedQty =Double.valueOf(detail[2].toString());
					itemInfoStr.append("数量:").append(expectedQty).append("\n");
					if(i<(details.size()-1)){
						itemInfoStr.append("----------------------\n");
					}
				}
				deliveryMap.put("workDocId", wwd.getId());
				deliveryMap.put("itemInfos", itemInfoStr);
				deliveryMap.put(RfConstant.FORWARD_VALUE,RfConstant.FORWARD_SUCCESS);
			}
		}
		return deliveryMap;
	}

	@SuppressWarnings("unchecked")
	private void checkPermission(String userName, String psw,long wid) {
		ThornUser user = userManager.retrieve(userName);
		if(null==user){
			throw new RfBusinessException("用户不存在!!!");
		}
		String encodePassword = DigestUtils.shaHex(psw);
		if (!(user.getPassword().equals(encodePassword))) {
			throw new RfBusinessException("密码错误!!");
		}
		if ((user.getExpiryDate() != null) && (user.getExpiryDate().before(new Date()))){
			throw new RfBusinessException("此用户已过期!");
		}
		if ((user.getPasswordExpiryDate() != null)&& (user.getPasswordExpiryDate().before(new Date()))){
			throw new RfBusinessException("此用户密码已过期!");
		}
		if (!(user.isEnabled())) {
			throw new RfBusinessException("此用户已禁用请联系相关人员!!");
		}
		//判断用户是否绑定相应角色
		String rcode = "SCXJJY";
		ThornRole role = (ThornRole)commonDao.findByQueryUniqueResult("FROM ThornRole role where role.code=:rc", "rc",rcode);
		if(null==role){
			throw new RfBusinessException("没有维护相关角色!!");
		}
		String whHql = "FROM WmsWarehouse wh WHERE wh.baseOrganization.id=:wb and wh.id=:wi";
		List<WmsWarehouse> wws = commonDao.findByQuery(whHql, new String[]{"wb","wi"}, new Object[]{BaseOrganizationHolder.getThornBaseOrganization().getId(),wid});
		if(wws.size()<=0){
			throw new RfBusinessException("数据错误!!");
		}
		String hql = "SELECT u.name FROM ThornUser u,ThornGroup g,ThornRole r WHERE u.id IN ELEMENTS(g.users) AND r.id IN ELEMENTS(g.roles) AND u.id=:ui AND r.code=:ri";
		List<Object[]> objs = commonDao.findByQuery(hql, new String[]{"ui","ri"}, new Object[]{user.getId(),rcode});
		if(objs.size()<=0 ){
			throw new RfBusinessException("该用户无此权限!!");
		}
	}

	@SuppressWarnings("unchecked")
	private List<Object[]> checkShip(WmsWorkDoc wwd,boolean flag) {
		String checkHql = "SELECT task.item.code,task.item.name,sum(task.pickedQty) FROM WmsTask task where task.workDoc=:tw group by task.item.code, task.item.name";
		List<Object[]> tasks = commonDao.findByQuery(checkHql,"tw", wwd);
		if(tasks.size()==0){
			throw new RfBusinessException("出库单明细不能为空!!");
		}
//		//整单发运
//		if(flag){
//			//生效才能发运
//			if(!WmsWorkDocStatus.ENABLED.equals(wwd.getStatus())){
//				throw new RfBusinessException("出库单状态未生效!!");
//			}
//		}else{
//			//明细发运作业中
//			if(!WmsWorkDocStatus.ENABLED.equals(wwd.getStatus())){
//				throw new RfBusinessException("明细出库条件不符合!!");
//			}
//		}
		return tasks;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map deliveryOutCommit(Map deliveryMap) throws RfBusinessException {
		if(null==deliveryMap.get("userNameInput")||null==deliveryMap.get("pswInput")){
			throw new RfBusinessException("请输入用户名密码!!");
		}
		String userName = deliveryMap.get("userNameInput").toString().trim();
		String psw = deliveryMap.get("pswInput").toString().trim();
		if(StringHelper.isNullOrEmpty(userName)||StringHelper.isNullOrEmpty(psw)){
			throw new RfBusinessException("用户名密码异常!!!");
		}
		Long workId = Long.valueOf(deliveryMap.get("workDocId").toString());
		WmsWorkDoc wwd = commonDao.load(WmsWorkDoc.class, workId);
		checkPermission(userName,psw,wwd.getWarehouse().getId());
		//调用发运
		tclworkDocManager.shipQuickShippingWorkDoc(wwd);
		deliveryMap.put(RfConstant.CLEAR_VALUE, Boolean.TRUE);
		deliveryMap.put(RfConstant.FORWARD_VALUE, RfConstant.FORWARD_SUCCESS);
		return deliveryMap;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map cancelOut(Map deliveryMap) throws RfBusinessException {
		deliveryMap.put(RfConstant.CLEAR_VALUE, Boolean.TRUE);
		deliveryMap.put(RfConstant.FORWARD_VALUE, RfConstant.FORWARD_SUCCESS);
		return deliveryMap;
	}

	@Override
	public Map showdeliveryInfo(Map deliveryMap) throws RfBusinessException {
		return deliveryMap;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map detailCodeInputCommit(Map deliveryMap)throws RfBusinessException {
		if(null!=deliveryMap.get("detailCodeInput")){
			String qcode = deliveryMap.get("detailCodeInput").toString().trim();
			if(!StringHelper.isNullOrEmpty(qcode)){
				WmsWorkDoc wwd = (WmsWorkDoc)commonDao.findByQueryUniqueResult("FROM  WmsWorkDoc wwd where wwd.code=:wc", "wc", qcode);
				if(null==wwd){
					throw new RfBusinessException("未找到对应的交货出库单!!");
				}
				deliveryMap.put(RfConstant.ENTITY_ID, wwd.getId());
				deliveryMap.put("workCode", wwd.getCode());
				deliveryMap.put(RfConstant.FORWARD_VALUE,RfConstant.FORWARD_SUCCESS);
			}
		}
		return deliveryMap;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map itemCodeInputCommit(Map deliveryMap) throws RfBusinessException {
		if(null!=deliveryMap.get("itemCodeInput")){
			String barcode = deliveryMap.get("itemCodeInput").toString().trim();
			Map map = WmsBarCodeParse.parse(barcode);
			String itemCode = map.get(WmsBarCodeParse.KEY_ITEMCODE).toString().trim();
			WmsItem item = (WmsItem)commonDao.findByQueryUniqueResult("FROM WmsItem item where item.code=:ic", "ic", itemCode);
			if(null==item){
				deliveryMap.put(RfConstant.FORWARD_VALUE, RfConstant.FORWARD_FAIL);
				return deliveryMap;
			}
			WmsWorkDoc wwd = null;
			if(null!=deliveryMap.get("workCode")){
				String wd = deliveryMap.get("workCode").toString().trim();
				wwd = (WmsWorkDoc)commonDao.findByQueryUniqueResult("FROM WmsWorkDoc wwd where wwd.code=:wc", "wc", wd);
			}
			if(null!=deliveryMap.get("parentId")){
				String wId = deliveryMap.get("parentId").toString().trim();
				if(!StringHelper.isNullOrEmpty(wId)){
					wwd = commonDao.load(WmsWorkDoc.class, Long.valueOf(wId));
				}
			}
			double qty  = getItemQty(wwd,item);
			deliveryMap.put(RfConstant.ENTITY_ID, wwd.getId());
			deliveryMap.put("deliveryCode", wwd.getCode());
			deliveryMap.put("itemCode", item.getCode());
			deliveryMap.put("itemName", item.getName());
			deliveryMap.put("qty", qty);
			deliveryMap.put(RfConstant.FORWARD_VALUE, RfConstant.FORWARD_SUCCESS);
		}
		return deliveryMap;
	}

	private double getItemQty(WmsWorkDoc wwd, WmsItem item) {
		Double qty = 0d;
		String qtyHql = "SELECT sum(task.pickedQty) FROM WmsTask task where task.workDoc=:tw and task.item=:ti group by task.item.code, task.item.name";
		@SuppressWarnings("unchecked")
		List<Object> qtys = commonDao.findByQuery(qtyHql, new String[]{"tw","ti"}, new Object[]{wwd,item});
		if(qtys.size()>0){
			qty = (Double)qtys.get(0);
		}
		return qty;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map showdetailInfo(Map deliveryMap) throws RfBusinessException {
		WmsWorkDoc wwd = null;
		if(null!=deliveryMap.get("workCode")){
			String wd = deliveryMap.get("workCode").toString().trim();
			wwd = (WmsWorkDoc)commonDao.findByQueryUniqueResult("FROM WmsWorkDoc wwd where wwd.code=:wc", "wc", wd);
		}
		deliveryMap.put(RfConstant.ENTITY_ID, wwd.getId());
		deliveryMap.put("workCode", wwd.getCode());
		return deliveryMap;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map detailOutCommit(Map deliveryMap) throws RfBusinessException {
		if(null==deliveryMap.get("userNameInput")||null==deliveryMap.get("pswInput")){
			throw new RfBusinessException("请输入用户名密码!!");
		}
		String userName = deliveryMap.get("userNameInput").toString().trim();
		String psw = deliveryMap.get("pswInput").toString().trim();
		if(StringHelper.isNullOrEmpty(userName)||StringHelper.isNullOrEmpty(psw)){
			throw new RfBusinessException("用户名密码异常!!!");
		}
		WmsItem item = null;
		if(null!=deliveryMap.get("itemCode")){
			String itemCode = deliveryMap.get("itemCode").toString().trim();
			if(!StringHelper.isNullOrEmpty(itemCode)){
				item = (WmsItem)commonDao.findByQueryUniqueResult("FROM WmsItem item where item.code=:ic", "ic", itemCode);
			}
		}
		WmsWorkDoc wwd = null;
		checkPermission(userName,psw,wwd.getWarehouse().getId());
		if(null!=deliveryMap.get("workCode")){
			String wd = deliveryMap.get("workCode").toString().trim();
			if(!StringHelper.isNullOrEmpty(wd)){
				wwd = (WmsWorkDoc)commonDao.findByQueryUniqueResult("FROM WmsWorkDoc wwd where wwd.code=:wc", "wc", wd);
			}
		}
		checkShip(wwd, Boolean.FALSE);
		String taskHql = "FROM WmsTask task where task.workDoc=:tw and task.item=:ti";
		WmsTask task = (WmsTask)commonDao.findByQueryUniqueResult(taskHql, new String[]{"tw","ti"}, new Object[]{wwd,item});
		//调用明细发运
		
		tclworkDocManager.detailShipQuickShippingTask(task);
		deliveryMap.put(RfConstant.CLEAR_VALUE, Boolean.TRUE);
		deliveryMap.put(RfConstant.FORWARD_VALUE, RfConstant.FORWARD_SUCCESS);
		return deliveryMap;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map delDetail(Map deliveryMap) throws RfBusinessException {
		Long bid = Long.valueOf(deliveryMap.get(RfConstant.ENTITY_ID).toString().trim());
		WmsBol bol = commonDao.load(WmsBol.class, bid);
		deliveryMap.put("bolCode", bol.getCode());
		deliveryMap.put(RfConstant.FORWARD_VALUE, RfConstant.FORWARD_SUCCESS);
		return deliveryMap;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map delInfo(Map deliveryMap) throws RfBusinessException {
		long bid = Long.valueOf(deliveryMap.get(RfConstant.ENTITY_ID).toString().trim());
		WmsBolDetail detail = commonDao.load(WmsBolDetail.class,bid);
		//查询剩余的明细信息
		String bolCode =deliveryMap.get("bolCode").toString().trim();
		String hqlInfo = "SELECT  " +
				" pickTicket.code," +
				" item.code," +
				" bolDetail.pickedQty FROM WmsBolDetail bolDetail" +
				" LEFT JOIN bolDetail.pickTicketDetail.pickTicket pickTicket " +
				" LEFT JOIN bolDetail.pickTicketDetail.item item " +
				"  WHERE bolDetail.id=:bbc";
		List<Object[]> infos = commonDao.findByQuery(hqlInfo, "bbc", detail.getId());
		StringBuffer detailInfoStr = new StringBuffer();
		for(int i = 0;i <infos.size();i++){
//			物料代码：
//			物料名称：
//			数量:
			Object[] info = infos.get(i);
			String pickCode = info[0].toString();
			detailInfoStr.append("拣货单号:").append(pickCode).append("\n");
			String itemCode = info[1].toString();
			detailInfoStr.append("物料编码:").append(itemCode).append("\n");
			Double qty =Double.valueOf(info[2].toString());
			detailInfoStr.append("数量:").append(qty).append("\n");
			if(i<(infos.size()-1)){
				detailInfoStr.append("----------------------\n");
			}
		}
		deliveryMap.put(RfConstant.ENTITY_ID, detail.getId());
		deliveryMap.put("bolCode", bolCode);
		deliveryMap.put("detailInfoStr", detailInfoStr);
		deliveryMap.put(RfConstant.FORWARD_VALUE, RfConstant.FORWARD_SUCCESS);
		return deliveryMap;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map delConfirm(Map deliveryMap) throws RfBusinessException {
		long did = Long.valueOf(deliveryMap.get(RfConstant.ENTITY_ID).toString().trim());
		WmsBolDetail detail = commonDao.load(WmsBolDetail.class, did);
		WmsBol bol = detail.getBol();
		deliveryMap.put(RfConstant.ENTITY_ID, bol.getId());
		bolManager.deleteBOLDetail(detail);
		deliveryMap.put(RfConstant.FORWARD_VALUE, RfConstant.FORWARD_SUCCESS);
		return deliveryMap;
	}

}
