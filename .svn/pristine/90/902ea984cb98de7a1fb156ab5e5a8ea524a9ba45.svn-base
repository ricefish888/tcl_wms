package com.vtradex.wms.server.service.bol.pojo;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.vtradex.thorn.server.exception.BusinessException;
import com.vtradex.thorn.server.model.EntityFactory;
import com.vtradex.thorn.server.service.WorkflowManager;
import com.vtradex.thorn.server.web.security.BaseOrganizationHolder;
import com.vtradex.wms.server.model.component.LotInfo;
import com.vtradex.wms.server.model.entity.base.WmsCustomer;
import com.vtradex.wms.server.model.entity.base.WmsFactoryXmlb;
import com.vtradex.wms.server.model.entity.base.WmsSapFactory;
import com.vtradex.wms.server.model.entity.base.WmsShippingLotTruck;
import com.vtradex.wms.server.model.entity.base.WmsShippingLotTruckBillType;
import com.vtradex.wms.server.model.entity.base.WmsSupplier;
import com.vtradex.wms.server.model.entity.bol.WmsBol;
import com.vtradex.wms.server.model.entity.bol.WmsBolDetail;
import com.vtradex.wms.server.model.entity.bol.WmsBolStatus;
import com.vtradex.wms.server.model.entity.bol.WmsBolType;
import com.vtradex.wms.server.model.entity.inventory.WmsInventory;
import com.vtradex.wms.server.model.entity.item.WmsBillType;
import com.vtradex.wms.server.model.entity.item.WmsItem;
import com.vtradex.wms.server.model.entity.item.WmsPackageUnit;
import com.vtradex.wms.server.model.entity.pickticket.WmsPickTicket;
import com.vtradex.wms.server.model.entity.pickticket.WmsPickTicketDetail;
import com.vtradex.wms.server.model.entity.production.ProductionOrderDetail;
import com.vtradex.wms.server.model.entity.production.WmsReservedOrderDetail;
import com.vtradex.wms.server.model.entity.receiving.WmsASN;
import com.vtradex.wms.server.model.entity.receiving.WmsASNDetail;
import com.vtradex.wms.server.model.entity.receiving.WmsASNStatus;
import com.vtradex.wms.server.model.entity.warehouse.WmsLocation;
import com.vtradex.wms.server.model.entity.warehouse.WmsWarehouse;
import com.vtradex.wms.server.model.enums.WmsBillOfType;
import com.vtradex.wms.server.model.enums.WmsInventoryLogType;
import com.vtradex.wms.server.model.enums.WmsLocationType;
import com.vtradex.wms.server.model.enums.WmsPickticketGenType;
import com.vtradex.wms.server.service.bol.WmsTclBolManager;
import com.vtradex.wms.server.service.inventory.WmsInventoryManager;
import com.vtradex.wms.server.service.item.TclMessageManager;
import com.vtradex.wms.server.service.message.WmsCustomerManager;
import com.vtradex.wms.server.service.receiving.WmsTclASNManager;
import com.vtradex.wms.server.service.rule.WmsRuleManager;
import com.vtradex.wms.server.service.sequence.WmsBussinessCodeManager;
import com.vtradex.wms.server.utils.BeanUtils;
import com.vtradex.wms.server.utils.DateUtil;
import com.vtradex.wms.server.utils.DoubleUtils;
import com.vtradex.wms.server.utils.StringHelper;
import com.vtradex.wms.webservice.utils.Arith;

/**
 * 
 * Tcl 定制化Bol业务
 * 
 * @author <a href="zhen.lei@vtradex.com">Yogurt_lei</a>
 * 
 * @date 2017年7月21日 下午12:31:32
 */
public class DefaultWmsTclBolManager extends DefaultWmsBolManager implements WmsTclBolManager {
    
	protected WmsBussinessCodeManager wmsBussinessCodeManager;
	protected WmsTclASNManager wmsTclAsnManager;
	protected TclMessageManager tclMessageManager;
   
	public DefaultWmsTclBolManager(WorkflowManager workflowManager,
            WmsInventoryManager inventoryManager,
            WmsBussinessCodeManager wmsBussinessCodeManager,
            WmsRuleManager wmsRuleManager, WmsCustomerManager wmsCustomerManager,WmsTclASNManager wmsTclAsnManager,TclMessageManager tclMessageManager) {
        super(workflowManager, inventoryManager, wmsBussinessCodeManager,
                wmsRuleManager, wmsCustomerManager);
        this.wmsBussinessCodeManager = wmsBussinessCodeManager;
        this.wmsTclAsnManager = wmsTclAsnManager;
        this.tclMessageManager = tclMessageManager;
    }
	
	
	@SuppressWarnings("unchecked")
	private WmsASN genASNHead(WmsPickTicket wmsPickTicket,WmsWarehouse warehouse) {
		Map<String, Object> map = null;
        try {
            map = wmsRuleManager.getRuleTableDetail("R101_库间调拨入库单据类型规则表", wmsPickTicket.getCompany().getName(),wmsPickTicket.getBillType().getName());
            if(map.isEmpty()){
            	throw new BusinessException("货主:"+wmsPickTicket.getCompany().getName()+"单据类型:"+wmsPickTicket.getBillType().getName()+"R101_库间调拨入库单据类型规则表未找到数据"); 
            }
        } catch(Exception e) {
            throw new BusinessException("warehouse.allocation.rule.none"); 
        }
            
        WmsASN asn =  EntityFactory.getEntity(WmsASN.class);

        String billTypeName = map.get("入库单据类型").toString();
        String find_bill_type_hql = "FROM WmsBillType billType WHERE billType.name=:billTypeName AND billType.masterGroup.id = :masterGroupId";
        List<WmsBillType> wmsBillTypeList = this.commonDao.findByQuery(find_bill_type_hql, new String[]{"billTypeName", "masterGroupId"}, new Object[]{billTypeName, wmsPickTicket.getCompany().getMasterGroup().getId()});
        
        WmsBillType wmsBillType = null;
        if(wmsBillTypeList.size() > 1) {
            throw new BusinessException("please.maintain.the.redundant.bill.type");
        }
        
        if(wmsBillTypeList.size() == 0) {
            throw new BusinessException("please.maintain.the.storage.bill.type");
        }

        wmsBillType = wmsBillTypeList.get(0);
        if(!WmsBillOfType.ASN.equals(wmsBillType.getType())) {
            throw new BusinessException("the.bill.type.must.be.asn");
        }
        
        asn.setBillType(wmsBillType);
        
//        if(null==wmsPickTicket.getCustomer()){
//        	throw new BusinessException("请维护拣货单的收货人!!!");
//        }
        
        String asnCode = wmsBussinessCodeManager.generateCodeByRule(warehouse,asn.getBillType().getCode());
        asn.setCode(asnCode);
        
        WmsWarehouse wh = (WmsWarehouse)commonDao.findByQueryUniqueResult("FROM WmsWarehouse warehouse WHERE warehouse.baseOrganization.id = :baseOrganizationId", 
        		new String[] {"baseOrganizationId"}, new Object[] {BaseOrganizationHolder.getThornBaseOrganization().getId()});

        String locationType = WmsLocationType.RECEIVE;
        if("补货入库单".equals(billTypeName)) { //增加补货入库ASN默认收货库位设置为T-1库位(HANDOVER)
        	locationType = WmsLocationType.HANDOVER;
        }
        
        List<WmsLocation> locs = commonDao.findByQuery("FROM WmsLocation loc WHERE loc.status = 'ENABLED' "
                + "AND loc.type = :locType AND loc.warehouse = :warehouse", 
                new String[]{"locType", "warehouse"}, 
                new Object[]{locationType, warehouse});
        if (locs!=null && locs.size()>0) {
            asn.setReceiveLocation(locs.get(0));
        } else {
            throw new BusinessException("库间调拨未维护【"+locationType+"】类型的库位!");
        }
       
        asn.setStatus(WmsASNStatus.ACTIVE);
        asn.setRelatedBill1(wmsPickTicket.getCode());
        asn.setWarehouse(warehouse);
        asn.setCompany(wmsPickTicket.getCompany());
        asn.setFromCode(wh.getCode());
        asn.setFromName(wh.getName());
        asn.setFromContact(wh.getContact());
        
        this.commonDao.store(asn);
        return asn;
	}
 
	private void genASNDetail(WmsPickTicketDetail pickTicketDetail, WmsASN asn,WmsInventory inventory,WmsBolDetail bolDetail,int lineNo) {

        Set<WmsASNDetail> details = asn.getDetails();
        if(details == null) {
        	details = new HashSet<WmsASNDetail>();
        }
        //根据BOL明细生成Asn明细
        WmsASNDetail wmsASNDetail =EntityFactory.getEntity(WmsASNDetail.class);
        wmsASNDetail.setAsn(asn);
        wmsASNDetail.setLineNo(lineNo);
        wmsASNDetail.setItem(bolDetail.getPickTicketDetail().getItem());
        wmsASNDetail.setExpectedPackQty(bolDetail.getPickedQty());
        wmsASNDetail.setExpectedQty(bolDetail.getPickedQty());
        wmsASNDetail.setPackageUnit(bolDetail.getPickTicketDetail().getPackageUnit());
        wmsASNDetail.setUserField5(inventory.getItemKey().getLotInfo().getExtendPropC8());//项目类型
        wmsASNDetail.setInventoryStatus(inventory.getStatus());//库存状态
        
      
        
        LotInfo lotInfo = inventory.getItemKey().getLotInfo();  //批次信息
        LotInfo newLotInfo = new LotInfo();
        BeanUtils.copyEntity(newLotInfo, lotInfo);
        
        
        WmsPickTicket pt = pickTicketDetail.getPickTicket();
        
      //如果是调拨出库，lotInfo需要修改工厂。
        if(WmsBolType.DB.equals(bolDetail.getBol().getType())) {
        	
        	String factorycode=pt.getUserField2();
	        WmsSapFactory factory = (WmsSapFactory)commonDao.findByQueryUniqueResult("FROM WmsSapFactory factory where factory.code=:fc", "fc",factorycode);
			if(null==factory){
				throw new BusinessException("工厂"+factorycode+"未找到");
			}
			newLotInfo.setExtendPropC10(factory.getCode()); //工厂编码
			newLotInfo.setExtendPropC11(factory.getName()); //工厂名称
			
        }
        else {
	        newLotInfo.setExtendPropC13(pt.getRelatedBill1()); //工单号/线体   VMI交接单入库生成的asndetail需要
	        if(pt.getOrderDate() != null) { //订单日期  如果是工单生成的  这个日期是工单的开始生产日期。
	        	newLotInfo.setExtendPropC14(DateUtil.format(pt.getOrderDate() , "yyyyMMdd")); //线体生产日期  VMI交接单入库生成的asndetail需要
	        }
	        newLotInfo.setExtendPropC15(pickTicketDetail.getId()+""); //pickticketdetail_id    VMI交接单入库生成的asndetail需要
        }
        wmsASNDetail.setLotInfo(newLotInfo);
        
        
        this.commonDao.store(wmsASNDetail);
        details.add(wmsASNDetail);
        
        WmsSupplier su = null;
        if(!StringHelper.isNullOrEmpty(inventory.getItemKey().getLotInfo().getSupplierCode())){
        	su = (WmsSupplier)commonDao.findByQueryUniqueResult("FROM WmsSupplier su WHERE su.code=:sc", "sc",inventory.getItemKey().getLotInfo().getSupplierCode());
        	if(null!=su){
        		asn.setSupplier(su);
        	}
        }
        asn.setDetails(details);
        asn.refreshQtyBU();
        asn.setOrderDate(new Date());
        this.commonDao.store(asn);
        wmsTclAsnManager.refreshDetail(asn);//刷新标签数量
	}
    @SuppressWarnings("unchecked")
	public void shipBol(WmsBol bol) {
    	String inventoryHql = "SELECT inventory.id FROM WmsInventory inventory WHERE inventory.location.type =:localtionType AND inventory.operationStatus='READY_OUT' "
				+ "AND inventory.relatedBillCode =:relatedBillCode AND inventory.item.id =:itemId AND inventory.packQty > 0 AND inventory.qty > 0";
		
		String hql = "SELECT bolDetail.id FROM WmsBolDetail bolDetail WHERE bolDetail.bol.id =:bolId "
				+ "AND ((bolDetail.bol.status =:status and bolDetail.bol.masterBol.id is null) "
				+ "or (bolDetail.bol.status=:status1 and bolDetail.bol.masterBol.id is not null))";
		List<Long> bolDetailIds = commonDao.findByQuery(hql, new String[]{"bolId","status","status1"},
				new Object[]{bol.getId(),WmsBolStatus.ACTIVE,WmsBolStatus.LOADING});
		
		
		
		WmsCustomer customer = null;
		if(bol.getCustomer()!=null) {
			customer = commonDao.load(WmsCustomer.class, bol.getCustomer().getId());
		}
		Boolean gen_asn = false;//是否需要生成asn
		WmsASN asn = null;
		if(null!=customer && null!=customer.getWarehouse()){
			gen_asn = true;
		}
		
		int lineNo = 0;
		for(Long bolDetailId : bolDetailIds){
			WmsBolDetail bolDetail = commonDao.load(WmsBolDetail.class, bolDetailId);
			
			WmsPickTicketDetail pickTicketDetail = commonDao.load(WmsPickTicketDetail.class, bolDetail.getPickTicketDetail().getId());
			WmsPickTicket pickTicket = this.commonDao.load(WmsPickTicket.class,pickTicketDetail.getPickTicket().getId());
			//是否允许短缺发运等于否时
			if(pickTicket.getAllowShortShip()!=null&&!pickTicket.getAllowShortShip()){
				//拣货数量大于等于期待数量时允许发运确认，如果小于则不允许发运确认
				if(pickTicket.getPickQty()<pickTicket.getQty()){
					throw new BusinessException("this.pt.can.not.allowShortShip",new String[]{pickTicket.getCode()});
				}
			}
//			Double unShipQty = DoubleUtils.sub(bolDetail.getPlanQty(), bolDetail.getPickedQty(),pickTicketDetail.getItem().getBuPrecision());
			Double unShipQty = bolDetail.getPickedQty();
			List<Long> inventoryIds = commonDao.findByQuery(inventoryHql, new String[]{"localtionType","relatedBillCode","itemId"}, new Object[]{WmsLocationType.SHIP,pickTicketDetail.getPickTicket().getCode(),pickTicketDetail.getItem().getId()});
		    if(inventoryIds.isEmpty()||inventoryIds.size()<=0){
		    	throw new BusinessException("this.bol.can.not.be.ship.beacuse.has.no.inventory");
		    }
			for(Long inventoryId : inventoryIds){
				if(unShipQty <= 0){
					break;
				}
				WmsInventory inventory = commonDao.load(WmsInventory.class, inventoryId);
				Double qty = inventory.getQty();
				Double invQty = inventory.getQty();
				if(unShipQty <  inventory.getQty()){
					qty = unShipQty;
					unShipQty = 0D;
					invQty = DoubleUtils.sub(inventory.getQty(),unShipQty,pickTicketDetail.getItem().getBuPrecision());
				}else{
					qty = inventory.getQty();
					unShipQty = DoubleUtils.sub(unShipQty, inventory.getQty(),pickTicketDetail.getItem().getBuPrecision());
					invQty = 0D;
				}
//				Double packQty = WmsPackageUnitUtils.getPackQty(inventory.getPackageUnit(), qty, inventory.getItem().getBuPrecision());
//				WmsCustomer customer = commonDao.load(WmsCustomer.class, bol.getCustomer().getId());
//				if(null!=customer&&null!=customer.getWarehouse()){
//					lineNo+=1;
//					warehouseAllocation(pickTicket,inventory,customer.getWarehouse(),bolDetail,lineNo);
//				}
				if(gen_asn) {
					lineNo+=1;
					if(asn==null) {
						asn = this.genASNHead(pickTicket, customer.getWarehouse());
						asn.setCustomerBill(bol.getCode());
						if(null != customer.getWarehouse()
								&& customer.getWarehouse().getCode().equals("VMI") ){
							asn.setUserField5(WmsFactoryXmlb.JS);//项目类别
						}
						commonDao.store(asn);
					}
					this.genASNDetail(pickTicketDetail,asn,inventory,bolDetail,lineNo);
				}
				inventoryManager.out(inventory, qty,WmsInventoryLogType.SHIPPING,"");
				
				pickTicketDetail.shippedQty(qty);
				
				
				if(!gen_asn) { //不是vmi交接出库  则需要回写预留单或其他单据 的发运数据
					
					tclCustomShipped(pickTicketDetail,qty,inventory);
					
				}
				
				
				commonDao.store(pickTicketDetail);
				workflowManager.doWorkflow(pickTicketDetail.getPickTicket(),"wmsPickTicketProcess.ship");
				tclMessageManager.sendProductionShipInfo(pickTicketDetail.getId(), inventory, qty);
//				if(pickTicket.getCustomer() != null && pickTicket.getCustomer().getWarehouse() != null && WmsPickTicketStatus.FINISHED.equals(pickTicket.getStatus())) {
			
//				}
				
//				bolDetail.pickedQty(qty);
				commonDao.store(bolDetail);
			}
		}
		
//		bol.setStatus(WmsBolStatus.SHIPPED);
		bol.setActualDeliveryTime(new Date());
		commonDao.store(bol);
	}
    
    
    private void tclCustomShipped(WmsPickTicketDetail pickTicketDetail, Double pickedQty,WmsInventory inventory) {
        
    	WmsPickTicket pt = pickTicketDetail.getPickTicket();
//    	if(pt.getBillType().getCode().equals(WmsBillTypeCode.SCLLD)) {
//	        List<Long> podIds =  commonDao.findByQuery("SELECT pod.id FROM ProductionOrderDetailPtDetail pt "
//	                + "LEFT JOIN pt.productionOrderDetail pod "
//	                + "WHERE pt.pickticketDetail.id=:ptID AND pod.allocatedQuantityBu-pod.pickedQuantityBu>0"
//	                + "ORDER BY pod.productionOrder.id, pod.id", 
//	                    "ptID", pickTicketDetail.getId());
//	        
//	        for (Long podId : podIds) {
//	            ProductionOrderDetail pod = commonDao.load(ProductionOrderDetail.class, podId);
//	            Double unPickedQty = pod.getUnPickedQty();
//	
//	            if (pickedQty <= 0) {
//	                break;
//	            }
//	            
//	            if (unPickedQty>pickedQty) {
//	                System.out.println("作业单作业确认修改工单明细拣货数量("+podId+")"+ pickedQty);
//	                pod.addPickedQuantityBu(pickedQty);
//	                pickedQty = 0D;
//	            } else {
//	                System.out.println("作业单作业确认修改工单明细拣货数量("+podId+")"+ unPickedQty);
//	                pod.addPickedQuantityBu(unPickedQty);
//	                pickedQty = DoubleUtils.sub(pickedQty, unPickedQty);
//	            }
//	            
//	        }
//    	}
//    	else 
    	if(WmsPickticketGenType.YLCKD.equals(pt.getUserField3())){ //预留出库单
    		List<Long> podIds =  commonDao.findByQuery("SELECT pod.id FROM ReservedOrderDetailPtDetail pt "
	                + "LEFT JOIN pt.reservedOrderDetail pod "
	                + "WHERE pt.pickticketDetail.id=:ptID AND pod.pickedQuantityBu-pod.shippedQuantityBu>0"
	                + "ORDER BY pod.reservedOrder.id, pod.id", 
	                    "ptID", pickTicketDetail.getId());
	        
	        for (Long podId : podIds) {
	        	WmsReservedOrderDetail pod = commonDao.load(WmsReservedOrderDetail.class, podId);
	            Double unPickedQty = pod.getUnShippedQty();
	
	            if (pickedQty <= 0) {
	                break;
	            }
	            
	            Double truckQty = 0d;
	            if (unPickedQty>pickedQty) {
	                System.out.println("作业单作业确认修改预留明细发运数量("+podId+")"+ pickedQty);
	                pod.addShippedQuantityBu(pickedQty);
	                truckQty =pickedQty;
	                pickedQty = 0D;
	            } else {
	                System.out.println("作业单作业确认修改预留明细发运数量("+podId+")"+ unPickedQty);
	                pod.addShippedQuantityBu(unPickedQty);
	                truckQty =unPickedQty;
	                pickedQty = DoubleUtils.sub(pickedQty, unPickedQty);
	            }
	            
	          //增加跟踪信息。
	            WmsShippingLotTruck t = EntityFactory.getEntity(WmsShippingLotTruck.class);
                t.setBillType(WmsShippingLotTruckBillType.YLCKD);
                t.setCompany(inventory.getCompany());
                t.setInventoryStatus(inventory.getStatus());
                t.setItem(inventory.getItem());
                t.setLineNo(pod.getLineNo()+"");
                t.setLocation(inventory.getLocation());
                t.setLotInfo(inventory.getItemKey().getLotInfo());
                t.setPackageUnit(inventory.getPackageUnit());
                t.setQty(truckQty);
                t.setRealteId(pod.getReservedOrder().getId());
                t.setRelateCode(pod.getReservedOrder().getCode());
                t.setSubRelateId(pod.getId());
                t.setWarehouse(inventory.getWarehouse());
                commonDao.store(t);
	            
	        }
    		
    		
    	}
        
    }
 
    /**
     * 原有流程增加发货单发运后生成的补货入库ASN默认收货库位设置为T-1库位(HANDOVER)
     */
    @SuppressWarnings("unchecked")
    public void warehouseAllocation(WmsPickTicket wmsPickTicket,WmsInventory inventory,WmsWarehouse warehouse,WmsBolDetail bolDetail,int lineNo) {

        Map<String, Object> map = null;
        try {
            map = wmsRuleManager.getRuleTableDetail("R101_库间调拨入库单据类型规则表", wmsPickTicket.getCompany().getName(),wmsPickTicket.getBillType().getName());
        } catch(Exception e) {
            throw new BusinessException("warehouse.allocation.rule.none"); 
        }
            
        WmsASN asn = new WmsASN();

        String billTypeName = map.get("入库单据类型").toString();
        String find_bill_type_hql = "FROM WmsBillType billType WHERE billType.name=:billTypeName AND billType.masterGroup.id = :masterGroupId";
        List<WmsBillType> wmsBillTypeList = this.commonDao.findByQuery(find_bill_type_hql, new String[]{"billTypeName", "masterGroupId"}, new Object[]{billTypeName, wmsPickTicket.getCompany().getMasterGroup().getId()});
        
        WmsBillType wmsBillType = null;
        if(wmsBillTypeList.size() > 1) {
            throw new BusinessException("please.maintain.the.redundant.bill.type");
        }
        
        if(wmsBillTypeList.size() == 0) {
            throw new BusinessException("please.maintain.the.storage.bill.type");
        }

        wmsBillType = wmsBillTypeList.get(0);
        if(!WmsBillOfType.ASN.equals(wmsBillType.getType())) {
            throw new BusinessException("the.bill.type.must.be.asn");
        }
        
        asn.setBillType(wmsBillType);
        
//        if(null==wmsPickTicket.getCustomer()){
//        	throw new BusinessException("请维护拣货单的收货人!!!");
//        }
        
        String asnCode = wmsBussinessCodeManager.generateCodeByRule(warehouse,asn.getBillType().getCode());
        asn.setCode(asnCode);
        
        WmsWarehouse wh = (WmsWarehouse)commonDao.findByQueryUniqueResult("FROM WmsWarehouse warehouse WHERE warehouse.baseOrganization.id = :baseOrganizationId", new String[] {"baseOrganizationId"}, new Object[] {BaseOrganizationHolder.getThornBaseOrganization().getId()});

        //增加补货入库ASN默认收货库位设置为T-1库位(HANDOVER)
        List<WmsLocation> locs = commonDao.findByQuery("FROM WmsLocation loc WHERE loc.status = 'ENABLED' "
                + "AND loc.type = :locType AND loc.warehouse = :warehouse", 
                new String[]{"locType", "warehouse"}, 
                new Object[]{"HANDOVER", warehouse});
        if (locs!=null && locs.size()>0) {
            asn.setReceiveLocation(locs.get(0));
        } else {
            throw new BusinessException("库间调拨未维护【HANDOVER】类型的库位!");
        }
       
        asn.setStatus(WmsASNStatus.ACTIVE);
        asn.setRelatedBill1(wmsPickTicket.getCode());
        asn.setWarehouse(warehouse);
        asn.setCompany(wmsPickTicket.getCompany());
        asn.setFromCode(wh.getCode());
        asn.setFromName(wh.getName());
        asn.setFromContact(wh.getContact());
        
        this.commonDao.store(asn);
        
        
        Set<WmsASNDetail> details = new HashSet<WmsASNDetail>();
        //根据BOL明细生成Asn明细
        WmsASNDetail wmsASNDetail =EntityFactory.getEntity(WmsASNDetail.class);
        wmsASNDetail.setAsn(asn);
        wmsASNDetail.setLineNo(lineNo);
        wmsASNDetail.setItem(bolDetail.getPickTicketDetail().getItem());
        wmsASNDetail.setExpectedPackQty(bolDetail.getPickTicketDetail().getExpectedPackQty());
        wmsASNDetail.setExpectedQty(bolDetail.getPickTicketDetail().getExpectedQty());
        wmsASNDetail.setPackageUnit(bolDetail.getPickTicketDetail().getPackageUnit());
        wmsASNDetail.setUserField5(WmsFactoryXmlb.BZ);//项目类型
        wmsASNDetail.setInventoryStatus(inventory.getStatus());//库存状态
        wmsASNDetail.setLotInfo(inventory.getItemKey().getLotInfo());//批次信息
        this.commonDao.store(wmsASNDetail);
        details.add(wmsASNDetail);
        
        WmsSupplier su = null;
        if(!StringHelper.isNullOrEmpty(inventory.getItemKey().getLotInfo().getSupplierCode())){
        	su = (WmsSupplier)commonDao.findByQueryUniqueResult("FROM WmsSupplier su WHERE su.code=:sc", "sc",inventory.getItemKey().getLotInfo().getSupplierCode());
        	if(null!=su){
        		asn.setSupplier(su);
        	}
        }
        asn.setDetails(details);
        asn.refreshQtyBU();
        asn.setOrderDate(new Date());
        this.commonDao.store(asn);
        wmsTclAsnManager.refreshDetail(asn);//刷新标签数量
    }
 
    @SuppressWarnings("rawtypes")
    public void addBOLDetail(Long bolId,WmsBolDetail detail,List values) {
		try {
			detail=commonDao.load(WmsBolDetail.class, detail.getId());
			double inputQty = new Double(values.get(0).toString().trim());//输入数量
			double pickedC = detail.getPickedQty();//已拣货数量
			WmsBol bol = this.commonDao.load(WmsBol.class, bolId);
			if(inputQty>pickedC){
				throw new BusinessException("添加数量不能大于已拣货数量!!!");
			}
			//查询ptdeatil是否被加入过
			String hql = "select detail FROM WmsBolDetail detail "
					+ "where detail.pickTicketDetail=:dp "
					+ "and detail.itemKey.id=:itemKeyId "
					+ "and detail.isPacking = :isPacking "
					+ "and detail.bol.id=:dbi ";
			
			WmsBolDetail deta = (WmsBolDetail)commonDao.findByQueryUniqueResult(hql, new String[]{"dp","itemKeyId","isPacking","dbi",}, 
					new Object[]{detail.getPickTicketDetail(),detail.getItemKey().getId(),detail.getIsPacking(),bolId});
			
			if(null!=deta){//已经被加入过
				deta.setPickedQty(Arith.add(deta.getPickedQty(),inputQty));
				commonDao.store(deta);
				detail.setPickedQty(Arith.sub(detail.getPickedQty(), inputQty));
				commonDao.store(detail);
				
				if(detail.getPickedQty()<=0d) {
					commonDao.delete(detail);
				}
//				bol.refreshBOLQty();
//				refreshBOlWeightAndVolume(bol);
				
			}else{//没有被加入过
				
				if(detail.getPickedQty()==inputQty) {
					detail.setBol(bol);
					bol.addBOLDetail(detail);
					this.commonDao.store(detail);
					
					bol.refreshBOLQty();
					refreshBOlWeightAndVolume(bol);
				}
				else {
					
					WmsBolDetail newBolDetail = EntityFactory.getEntity(WmsBolDetail.class);
					BeanUtils.copyEntity(newBolDetail, detail);
					newBolDetail.setId(null);
						
					newBolDetail.setPickedQty(inputQty);
					newBolDetail.setItemKey(detail.getItemKey());
					newBolDetail.setBol(bol);
					bol.addBOLDetail(newBolDetail);
					commonDao.store(newBolDetail);
					
					
					detail.setPickedQty(Arith.sub(detail.getPickedQty(), inputQty));
					commonDao.store(detail);
					
					
					bol.refreshBOLQty();
					refreshBOlWeightAndVolume(bol);
				}
			}
			
			//记录已加入BOL数量到拣货单明细
			WmsPickTicketDetail ptDetail = this.commonDao.load(WmsPickTicketDetail.class, detail.getPickTicketDetail().getId());
			ptDetail.addPlanedShipQty(detail.getPlanQty());
			this.commonDao.store(ptDetail);
		} catch (BusinessException be) {
			logger.error("save.wmsBolDetail.list.error", be);
			throw new BusinessException("save.wmsBolDetail.list.error");
		}
	}
    
	public void deleteBOLDetail(WmsBolDetail bolDetail) {
    	
    	//查询未添加的是否有
		String hql = "select detail FROM WmsBolDetail detail "
				+ "where detail.pickTicketDetail=:dp "
				+ "and detail.itemKey.id=:itemKeyId "
				+ "and detail.isPacking = :isPacking "
				+ "and detail.bol  is null ";
		
		WmsBolDetail deta = (WmsBolDetail)commonDao.findByQueryUniqueResult(hql, new String[]{"dp","itemKeyId","isPacking"}, 
				new Object[]{bolDetail.getPickTicketDetail(),bolDetail.getItemKey().getId(),bolDetail.getIsPacking()});
		
		WmsBol bol = load(WmsBol.class,bolDetail.getBol().getId());
		
		if(null!=deta){//有未被添加的
			deta.setPickedQty(Arith.add(deta.getPickedQty(),bolDetail.getPickedQty()));
			commonDao.store(deta);
			bol.removeDetails(bolDetail);
			
			bol.refreshBOLQty();
			
			refreshBOlWeightAndVolume(bol);
			commonDao.delete(bolDetail);
			
		}else{//没有未被添加的
			
			bol.removeDetails(bolDetail);
			bol.refreshBOLQty();
			this.refreshBOlWeightAndVolume(bol);
			bolDetail.setBol(null);
			this.commonDao.store(bolDetail);
			 
		}
		//移出已加入BOL数量到拣货单明细
		WmsPickTicketDetail ptDetail = this.commonDao.load(WmsPickTicketDetail.class, bolDetail.getPickTicketDetail().getId());
		ptDetail.movePlanedShipQty(bolDetail.getPlanQty());
		this.commonDao.store(ptDetail);
	}
	
	public void storeBOLDB(WmsBol bol) {
		this.storeBOL(bol);
		
		//生成明细。
		
		Long ptid = bol.getPtId();
		
		if(ptid == null || ptid==0L) {
			throw new BusinessException("拣货单不能为空");
		}
		WmsPickTicket wmsPickTicket = commonDao.load(WmsPickTicket.class, ptid);
		
 
		bol.setExpectedDeliveryTime(new Date());
		bol.setCustomer(wmsPickTicket.getCustomer());
		bol.setContact(wmsPickTicket.getContact());
		bol.setShipToName(wmsPickTicket.getShipToName());
		this.storeBOL(bol);
		//生成bol时过滤掉需要打包的BOL明细
		String getUsableBolDetail = " from WmsBolDetail detail where detail.bol.id is null and detail.pickTicketDetail.id = :id "
				                  + " and detail.isPacking ='N'";
		for(WmsPickTicketDetail wmsPickTicketDetail : wmsPickTicket.getDetails()){
			List<WmsBolDetail> wmsBolDetails = this.commonDao.findByQuery(getUsableBolDetail, "id", wmsPickTicketDetail.getId());
			if(!wmsBolDetails .isEmpty()&&wmsBolDetails.size()>0){
				for(WmsBolDetail wmsBolDetail : wmsBolDetails){
				this.addBOLDetail(bol.getId(), wmsBolDetail);
				}
			}
		}
		if(bol.getDetails() != null && bol.getDetails().size() > 0){	
			this.workflowManager.doWorkflow(bol, "wmsBOLProcess.active");
		 
		}else{
			this.commonDao.delete(bol);
		}
		
	}
	
}
