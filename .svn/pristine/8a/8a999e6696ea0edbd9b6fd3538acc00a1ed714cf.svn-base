package com.vtradex.wms.rfserver.service.inventory.pojo;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.vtradex.rf.common.RfConstant;
import com.vtradex.rf.common.exception.RfBusinessException;
import com.vtradex.thorn.client.utils.StringUtils;
import com.vtradex.thorn.server.service.pojo.DefaultBaseManager;
import com.vtradex.thorn.server.web.security.BaseOrganizationHolder;
import com.vtradex.wms.rfserver.service.inventory.TclRfInventoryQueryManager;
import com.vtradex.wms.server.helper.WmsBarCodeParse;
import com.vtradex.wms.server.model.entity.inventory.WmsInventory;
import com.vtradex.wms.server.model.entity.item.WmsCompany;
import com.vtradex.wms.server.model.entity.item.WmsItem;
import com.vtradex.wms.server.model.entity.item.WmsItemKey;
import com.vtradex.wms.server.model.entity.item.WmsPackageUnit;
import com.vtradex.wms.server.model.entity.warehouse.WmsLocation;
import com.vtradex.wms.server.model.entity.warehouse.WmsWarehouse;
import com.vtradex.wms.server.model.enums.WmsInventoryOperationStatus;

public class DefaultTclRfInventoryQueryManager extends DefaultBaseManager implements TclRfInventoryQueryManager{

	@SuppressWarnings("unchecked")
	@Override
	public Map inventoryQueryInputCommit(Map params) {
		String locCode = params.get("inventoryQueryLocationInput") == null?null:params.get("inventoryQueryLocationInput").toString().trim();
		String itemCode = params.get("inventoryQueryItemInput") == null?null:params.get("inventoryQueryItemInput").toString().trim();
		
		//库位/货品不能都为空
		if(StringUtils.isEmpty(itemCode)&&StringUtils.isEmpty(locCode)){
			throw new RfBusinessException("库位货品不能都为空");
		}
		
		String hql = "from WmsWarehouse warehouse where warehouse.baseOrganization.id = :baseOrganizationId";	  
		 //查询当前仓库
		WmsWarehouse warehouse = (WmsWarehouse) this.commonDao.findByQueryUniqueResult(hql,"baseOrganizationId",
				BaseOrganizationHolder.getThornBaseOrganization().getId());
		//当库位编码不为空时
		if(!StringUtils.isEmpty(locCode)){
		//校验库位是否存在
		hql = "from WmsLocation loc where loc.warehouse.id =:warehouseId and loc.code =:locCode ";
		List<WmsLocation> locs = this.commonDao.findByQuery(hql, new String[]{"warehouseId","locCode"}, 
				new Object[]{warehouse.getId(),locCode});
		if(locs.isEmpty()||locs.size()<=0){
			throw new RfBusinessException("库位不存在!!");
		}
		WmsLocation location = this.commonDao.load(WmsLocation.class, locs.get(0).getId());
		}
		//当货品编码不为空时
		if(!StringUtils.isEmpty(itemCode)){
		//查询货品编码对应货品是否存在
		Map map = WmsBarCodeParse.parse(itemCode);
		String ic = map.get(WmsBarCodeParse.KEY_ITEMCODE).toString().trim();
		WmsItem item = (WmsItem)commonDao.findByQueryUniqueResult("FROM WmsItem item where 1=1 and item.code=:ic", "ic", ic);
		if(null==item){
			throw new RfBusinessException("货品不存在!!");
		}
		params.put("itemCode", item.getCode());
		}
		params.put("warehouseId", warehouse.getId());
		params.put(RfConstant.FORWARD_VALUE, RfConstant.FORWARD_SUCCESS);
		return params;
	}

	@Override
	public Map inventoryInfo(Map params) {
		Long inventoryId = params.get(RfConstant.ENTITY_ID) == null?null:Long.valueOf(params.get(RfConstant.ENTITY_ID).toString());
		WmsInventory inventory = this.commonDao.load(WmsInventory.class, inventoryId);
		Map<String, Object> result = new HashMap<String, Object>();
		WmsCompany company = this.commonDao.load(WmsCompany.class, inventory.getCompany().getId());
		WmsItem item = this.commonDao.load(WmsItem.class, inventory.getItem().getId());
		WmsLocation location = this.commonDao.load(WmsLocation.class, inventory.getLocation().getId());
		WmsPackageUnit pagUnit = this.commonDao.load(WmsPackageUnit.class, inventory.getPackageUnit().getId());
		WmsItemKey itemKey = this.commonDao.load(WmsItemKey.class, inventory.getItemKey().getId());
//		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");
		result.put("companyName", company.getName());
		result.put("locCode", location.getCode());
		result.put("itemCode", item.getCode());
		result.put("itemName", item.getName());
		result.put("lotNo", itemKey.getLotInfo()!=null?itemKey.getLotInfo().getLot():"");
		result.put("fcode", itemKey.getLotInfo()!=null?itemKey.getLotInfo().getExtendPropC10():"");
		result.put("sname", itemKey.getLotInfo()!=null?itemKey.getLotInfo().getExtendPropC9():"");
		result.put("productDate", itemKey.getLotInfo()!=null?itemKey.getLotInfo().getProductDate():"");
		result.put("unit", pagUnit.getUnit());
		result.put("packQty", inventory.getPackQty());
		result.put("qty", inventory.getQty());
		result.put("inventoryStatus", inventory.getStatus());
		String operationStatus = "";
		if(WmsInventoryOperationStatus.NORMAL.equals(inventory.getOperationStatus())){
			operationStatus="正常";
		}else if(WmsInventoryOperationStatus.READY_OUT.equals(inventory.getOperationStatus())){
			operationStatus="待出";
		}
		result.put("operationStatus", operationStatus);
		return result;
	}

	@SuppressWarnings("unchecked")
	@Override
	public Map previousPage(Map params) {
		Map<String, Object> perResult = new HashMap<String, Object>();
		
		perResult.putAll(params);
		perResult.put(RfConstant.ENTITY_ID, "");
		
		params.put(RfConstant.FORWARD_VALUE, RfConstant.FORWARD_SUCCESS);
		//清除部分值
		params.put(RfConstant.CLEAR_VALUE, Boolean.TRUE);
		params.put(RfConstant.PERSISTENT_VALUE, perResult);//将持久map放入返回map中
		return params;//返回原map
	}

	@Override
	public Map switchReturn(Map params) {
		Map<String, Object> result = new HashMap<String, Object>();
		result.put(RfConstant.CLEAR_VALUE, Boolean.TRUE);
		result.put(RfConstant.FORWARD_VALUE, RfConstant.FORWARD_SUCCESS);
		return result;
	}

}
