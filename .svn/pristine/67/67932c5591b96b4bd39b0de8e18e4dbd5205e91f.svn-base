package com.vtradex.wms.rfserver.service.receiving.pojo;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils; 

import com.vtradex.rf.common.RfConstant;
import com.vtradex.rf.common.exception.RfBusinessException; 
import com.vtradex.rf.util.GsonUtil;
import com.vtradex.thorn.server.service.pojo.DefaultBaseManager;
import com.vtradex.thorn.server.util.LocalizedMessage; 
import com.vtradex.thorn.server.web.security.BaseOrganizationHolder;
import com.vtradex.thorn.server.web.security.UserHolder; 
import com.vtradex.wms.rfserver.bean.RfAsnVo;
import com.vtradex.wms.rfserver.bean.RfSkuTaskVo;
import com.vtradex.wms.rfserver.common.RfConstantDiy;
import com.vtradex.wms.rfserver.common.RfMessageCode;
import com.vtradex.wms.rfserver.service.receiving.TclRfAsnManager;
import com.vtradex.wms.rfserver.service.receiving.RfPalletPutawayWorkManager;
import com.vtradex.wms.rfserver.service.receiving.RfSKUPutawayWorkManager;
import com.vtradex.wms.server.helper.WmsBarCodeParse;
import com.vtradex.wms.server.model.component.LotInfo;
import com.vtradex.wms.server.model.entity.base.WmsSupplier;
import com.vtradex.wms.server.model.entity.base.WmsWorker;
import com.vtradex.wms.server.model.entity.item.WmsBillType;
import com.vtradex.wms.server.model.entity.item.WmsCompany;
import com.vtradex.wms.server.model.entity.item.WmsInventoryState;
import com.vtradex.wms.server.model.entity.item.WmsItem;
import com.vtradex.wms.server.model.entity.item.WmsLotRule;
import com.vtradex.wms.server.model.entity.item.WmsPackageUnit;
import com.vtradex.wms.server.model.entity.receiving.WmsASN;
import com.vtradex.wms.server.model.entity.receiving.WmsASNDetail;
import com.vtradex.wms.server.model.entity.receiving.WmsASNStatus;
import com.vtradex.wms.server.model.entity.warehouse.WmsWarehouse;
import com.vtradex.wms.server.model.entity.workdoc.WmsWorkDoc;
import com.vtradex.wms.server.model.enums.BaseStatus;
import com.vtradex.wms.server.model.enums.WmsTaskStatus;
import com.vtradex.wms.server.model.enums.WmsWorkDocStatus;
import com.vtradex.wms.server.model.enums.WmsWorkDocType;
import com.vtradex.wms.server.service.receiving.WmsASNDetailManager;
import com.vtradex.wms.server.service.receiving.WmsASNManager;
import com.vtradex.wms.server.service.receiving.WmsNoTransactionalManager;
import com.vtradex.wms.server.service.receiving.WmsTclASNManager;
import com.vtradex.wms.server.service.receiving.pojo.DefaultWmsTclASNManager;
import com.vtradex.wms.server.service.rule.WmsRuleManager;
import com.vtradex.wms.server.utils.DoubleUtils;

/**
 * ASN操作入口处理类
 * @Description:
 * @Author:        <a href="yequan.song@vtradex.net">宋叶全</a>
 * @CreateDate:    2016年1月22日
 * @version:       v1.0
 */
public class DefaultTclRfAsnManager extends DefaultBaseManager implements TclRfAsnManager{
	
	protected WmsTclASNManager wmsTclASNManager;
	 
	public DefaultTclRfAsnManager(WmsTclASNManager wmsTclASNManager) {
		this.wmsTclASNManager = wmsTclASNManager; 
	}
	 
	 
	/**
	 * 扫描asn单号提交
	 * @param asnMap
	 * @return
	 * @throws RfBusinessException
	 */
	public Map asnCodeInputCommit(Map asnMap) throws RfBusinessException {
		String asnCode = (String) asnMap.get("asnCodeInput");
		if(StringUtils.isEmpty(asnCode)){
			throw new RfBusinessException("收货单号不能为空");
		}
		String hql = "From WmsASN asn where asn.warehouse.baseOrganization.id=:baseOrganizationId and asn.code=:code ";
		WmsASN asn = (WmsASN)commonDao.findByQueryUniqueResult(hql, new String[]{"baseOrganizationId","code"},new Object[]{BaseOrganizationHolder.getThornBaseOrganization().getId(), asnCode});
		if(asn==null){
			throw new RfBusinessException("找不到相应的收货单");
		}
		if(!(WmsASNStatus.ACTIVE.equals(asn.getStatus())||WmsASNStatus.RECEIVING.equals(asn.getStatus()))){
			throw new RfBusinessException("收货单状态不为生效和部分收货状态，不允许收货");
		}
		WmsBillType billType = commonDao.load( WmsBillType.class,asn.getBillType().getId());
		WmsSupplier supplier = commonDao.load( WmsSupplier.class,asn.getSupplier().getId());
		String userField5 = asn.getUserField5();
		asnMap.put(RfConstant.ENTITY_ID, asn.getId());
		asnMap.put("asnId", asn.getId());
		asnMap.put("asnCode", asn.getCode());
		asnMap.put("asnTypeName", billType.getName());
		asnMap.put("recvQuantity", asn.getReceiveQty());
		asnMap.put("totalQuantity", asn.getQty());
		
		asnMap.put("supplierCode", supplier.getCode());
		asnMap.put("supplierName", supplier.getName());
		asnMap.put("userField5", "0".equals(userField5)?"标准":"寄售");
		asnMap.put(RfConstant.FORWARD_VALUE, "success");
		return asnMap;
	}

	/**
	 * 显示asn信息
	 * @param asnMap
	 * @return
	 * @throws RfBusinessException
	 */
	public Map asnInfo(Map asnMap) throws RfBusinessException {
		Long asnId = Long.valueOf(asnMap.get("asnId").toString());
		WmsASN asn = commonDao.load(WmsASN.class,asnId);
		asnMap.put("recvQuantity", asn.getReceiveQty());
		asnMap.put("totalQuantity", asn.getQty());
		
		return asnMap;
	}
	
	/**
	 * 扫描货品条码信息
	 * @param asnMap
	 * @return
	 * @throws RfBusinessException
	 */
	public Map asnItemCommit(Map asnMap) throws RfBusinessException {
		Long asnId = Long.valueOf(asnMap.get("asnId").toString());
		String barCode = (String) asnMap.get("asnItemInput");
		if(StringUtils.isEmpty(barCode)){
			throw new RfBusinessException("条码不能为空");
		}
		if(-1==barCode.indexOf("_")){
			throw new RfBusinessException("条码格式不正确");
		}
		Map map = WmsBarCodeParse.parse(barCode);
		String itemCode = (String)map.get(WmsBarCodeParse.KEY_ITEMCODE);
		//查询asn明细
		String hql = "select sum(detail.expectedQty),sum(detail.receivedQty),max(cast(detail.lotInfo.extendPropC12,double)),max(detail.id) From WmsASNDetail detail where detail.item.code=:itemCode and detail.asn.id=:asnId ";
		Object[] detailObj = (Object[])commonDao.findByQueryUniqueResult(hql,new String[]{"itemCode","asnId"},new Object[]{itemCode,asnId});
		if(detailObj==null){
			throw new RfBusinessException("找不到相应的明细或者已经该货品已经收货完成");
		}
		Double expectedQty =Double.valueOf(detailObj[0].toString());
		if(expectedQty<=0){
			throw new RfBusinessException("找不到相应的明细");
		}
		Double receivedQty =Double.valueOf(detailObj[1].toString());
		if(expectedQty<=receivedQty){
			throw new RfBusinessException("该货品已经收货完成");
		}
		String minPakQtyStr=detailObj[2]==null?"":detailObj[2].toString();
		if(StringUtils.isEmpty(minPakQtyStr)){
			throw new RfBusinessException("最小包装量为空");
		}
		Double minPakQty=0d;
		try{
			minPakQty= Double.valueOf(minPakQtyStr);
		}catch(NumberFormatException e){
			throw new RfBusinessException("最小包装量"+minPakQtyStr+"不是数字");
		}
		if(minPakQty<=0){
			throw new RfBusinessException("最小包装量"+minPakQtyStr+"不是大于0的数字");
		}
		WmsASNDetail asnDetail = commonDao.load(WmsASNDetail.class, Long.valueOf(detailObj[3].toString()));
		WmsItem item = commonDao.load(WmsItem.class, asnDetail.getItem().getId());
		double unReceiveQty = DoubleUtils.sub(expectedQty, receivedQty);
		//因为可能带小数点所以用BigDecimal divideAndRemainder方法获得商和余数
		BigDecimal[] results =  (BigDecimal.valueOf(unReceiveQty)).divideAndRemainder(BigDecimal.valueOf(minPakQty));
		asnMap.put("asnDetailId",asnDetail.getId());
		asnMap.put("itemCode", itemCode);
		asnMap.put("itemName", item.getName());
		asnMap.put("itemId",item.getId()); 
		asnMap.put("expectedQty", expectedQty);
		asnMap.put("unReceiveQty", unReceiveQty);
		asnMap.put("boxQty", results[0]); 
		asnMap.put("qty",  results[1]); 
		asnMap.put(RfConstant.FORWARD_VALUE, "success");
		return asnMap;
	}
	
	public static void main(String[] args){
		Double unReceiveQty = 1d;
		Double minPakQty = 3.2d;
		Integer boxQty = (int) (unReceiveQty/minPakQty);
		Double qty1 =unReceiveQty%minPakQty;
		  BigDecimal[] results =  (BigDecimal.valueOf(unReceiveQty)).divideAndRemainder(BigDecimal.valueOf(minPakQty));
		System.out.println("----------------箱"+boxQty);
		System.out.println("----------------f个"+results[0]);
		System.out.println("----------------个"+results[1]);
	}
	/**
	 * RF 收货
	 * @Description:
	 * @Author:        <a href="yequan.song@vtradex.net">宋叶全</a>
	 * @CreateDate:    2016年1月26日
	 * @param asnMap
	 * @return:
	 * @arithMetic:
	 * @exception:
	 */
	public Map asnReceiveSingle(Map asnMap) throws RfBusinessException{
		String itemCode =  asnMap.get("itemCode").toString();
		Long asnId = Long.valueOf(asnMap.get("asnId").toString());
		//收货数量
		double recievQty = asnMap.get("receiveQuantity") == null?null:Double.valueOf(asnMap.get("receiveQuantity").toString());
		Double unReceiveQty = asnMap.get("unReceiveQty") == null?null:Double.valueOf(asnMap.get("unReceiveQty").toString());
		if(recievQty>unReceiveQty){
			throw new RfBusinessException("收货数量不能大于可收数量");
		}
//		WmsASN asn = commonDao.load(WmsASN.class,asnId);
//		WmsCompany company = commonDao.load(WmsCompany.class,asn.getCompany().getId());
//		String hql = "From WmsInventoryState itemState where itemState.masterGroup=:masterGroup and itemState.name=:name";
//		
////		WmsInventoryState itemState = (WmsInventoryState)commonDao.findByQueryUniqueResult(hql, new String[]{"masterGroup","name"}, new Object[]{company.getMasterGroup(),"待检"})	;
//		if(itemState==null){
//			throw new RfBusinessException("库存状态管理中找不到待检状态");
//		}
	    String hql = "select max(work.id) From WmsWorker work where work.status=:status and work.user.id=:userId  ";
		Long workId = (Long)commonDao.findByQueryUniqueResult(hql, new String[]{"status","userId"}, new Object[]{BaseStatus.ENABLED,UserHolder.getUser().getId()});
		wmsTclASNManager.rfReceiving(asnId, itemCode, recievQty, workId==null?0l:workId.longValue());
		String asnHql = "SELECT asn.id "
				+ " FROM WmsASN asn "
				+ " LEFT JOIN asn.billType "
				+ " LEFT JOIN asn.receiveLocation "
				+ " LEFT JOIN asn.receiveDock "
				+ " LEFT JOIN asn.company WHERE asn.id =:asnId "
				+ " AND asn.qty > asn.receiveQty AND asn.status IN('ACTIVE','RECEIVING')";
		List<Long> asnList = commonDao.findByQuery(asnHql, new String[]{"asnId"}, new Object[]{asnId});
		
		if (null == asnList || asnList.size() <=0) { 
			asnMap.put(RfConstant.FORWARD_VALUE, "success_all_received");
			asnMap.put(RfConstant.CLEAR_VALUE, "true");
		}else{
			asnMap.put(RfConstant.FORWARD_VALUE, "success_part_received"); 
			asnMap.put("asnItemInput","");
			asnMap.put("receiveQuantity",""); 
    		asnMap.put(RfConstant.ENTITY_ID, asnId);
		}
		return asnMap;
	}

	/**
	 * 货品切换
	 * @Description:
	 * @Author:        <a href="yequan.song@vtradex.net">宋叶全</a>
	 * @CreateDate:    2016年1月26日
	 * @param asnMap
	 * @return:
	 * @arithMetic:
	 * @exception:
	 */
	public Map asnItemSwitch(Map asnMap) throws RfBusinessException{
		// TODO Auto-generated method stub 
		
		Long asnId = asnMap.get("asnId") == null?null:Long.valueOf(asnMap.get("asnId").toString());
		 
		if (null == asnId || StringUtils.isEmpty(asnId.toString())) {
			throw new RfBusinessException(RfMessageCode.RF_MESSAGE_PARAM_LOSE);
		}
		 
		String asnHql = "SELECT new com.vtradex.wms.rfserver.bean.RfAsnVo(asn.id, asn.code, asn.billType.name, asn.customerBill, "
				+ " asn.receiveQty, asn.qty, asn.details.size, asn.receiveLocation.code, asn.receiveDock.name,asn.orderDate) "
				+ " FROM WmsASN asn "
				+ " LEFT JOIN asn.billType "
				+ " LEFT JOIN asn.receiveLocation "
				+ " LEFT JOIN asn.receiveDock "
				+ " LEFT JOIN asn.company WHERE asn.id =:asnId "
				+ " AND asn.qty > asn.receiveQty AND asn.status IN('ACTIVE','RECEIVING')";
		List<RfAsnVo> asnList = commonDao.findByQuery(asnHql, new String[]{"asnId"}, new Object[]{asnId});
		if (null == asnList || asnList.size() <=0) {
			asnMap.put(RfConstant.FORWARD_VALUE, "success_all_received");
			asnMap.put(RfConstant.CLEAR_VALUE, "true");
		}else{
			//清空商品条码
			asnMap.put("asnItemInput", "");
			asnMap.put(RfConstant.FORWARD_VALUE, "success_part_received"); 
		}
		return asnMap;
	}
	
	/*SKU作业货品扫描*/
	public Map skuTaskItemCommit(Map skuTaskItemMap) throws RfBusinessException{
		//System.out.println("skuTaskItemCommit()="+skuTaskItemMap.toString());
		Map<String, Object> result = new HashMap<String, Object>();
		/*校验参数*/
		//Long id = skuTaskItemMap.get(RfConstant.ENTITY_ID) == null?null:Long.valueOf(skuTaskItemMap.get(RfConstant.ENTITY_ID).toString());
		String barCode = skuTaskItemMap.get("itemCodeInput") == null?null:skuTaskItemMap.get("itemCodeInput").toString();
		if(StringUtils.isEmpty(barCode)){
			throw new RfBusinessException("条码不能为空");
		}
		if(-1==barCode.indexOf("_")){
			throw new RfBusinessException("条码格式不正确");
		}
		Map map = WmsBarCodeParse.parse(barCode);
		String itemCode = (String)map.get(WmsBarCodeParse.KEY_ITEMCODE);
		Long workDocId =  0l;
		workDocId=skuTaskItemMap.get("workDocId") == null?null:Long.valueOf(skuTaskItemMap.get("workDocId").toString());
		if (null == workDocId || StringUtils.isEmpty(workDocId.toString())) {
			workDocId = skuTaskItemMap.get(RfConstant.ENTITY_ID) == null?null:Long.valueOf(skuTaskItemMap.get(RfConstant.ENTITY_ID).toString());
			if(null == workDocId || StringUtils.isEmpty(workDocId.toString())){
			   throw new RfBusinessException(RfMessageCode.RF_MESSAGE_PARAM_LOSE);
			} 
		}
		if (null == itemCode || StringUtils.isEmpty(itemCode)) {
			throw new RfBusinessException(RfMessageCode.RF_MESSAGE_PARAM_LOSE);
		}
		/*
		 * 1.按照上架动线号升序获取上架任务
		 * 2.按照产品默认规则，货品代码输入框仍然支持代码，条码1和条码2字段
		 * 3.如果扫描到的与推荐的货品不一致，且当前上架单存在上架任务的话，则没有提示，继续下一个界面；如果扫描到的与推荐的货品不一致，且当前上架单不存在上架任务的话，则提示“当前货品没有上架任务，请重新扫描！”
		 */
		/*获取推荐的货品*/
		List<RfSkuTaskVo> skuTaskList = this.getSKUTaskItemList(workDocId,"");
		/*创建持久map*/
		Map<String, Object> perResult = new HashMap<String, Object>();
		perResult.putAll(skuTaskItemMap);
		if (skuTaskList.size() > 0) {
			RfSkuTaskVo skuTaskVo = skuTaskList.get(0);
			if (!skuTaskVo.getItemCode().equals(itemCode)) {
				List<RfSkuTaskVo> skuTaskInputList = this.getSKUTaskItemList(workDocId, "  and i.code = '"+itemCode+"' ");
				if (null != skuTaskInputList && skuTaskInputList.size() >= 1) {
					perResult.putAll(GsonUtil.toJsonMap((RfSkuTaskVo)skuTaskInputList.get(0)));
					perResult.put(RfConstantDiy.BE_REFRESH, Boolean.FALSE);
				}else {
					throw new RfBusinessException(RfMessageCode.RF_MESSAGE_WORK_DOC_SKU_ITEM_NO_TASK);
				}
			}else {
				perResult.putAll(GsonUtil.toJsonMap((RfSkuTaskVo)skuTaskList.get(0)));
			}
		}else {
			throw new RfBusinessException(RfMessageCode.RF_MESSAGE_WORK_DOC_MAY_BE_PUT_AWAY_FINISH);
		}
		Double actualQty=Double.parseDouble(perResult.get("planQty").toString())-Double.parseDouble(perResult.get("putawayQty").toString());
		/*填充页面标签默认值*/
		perResult.put("actualPutatwayQty", actualQty);
		result.put(RfConstant.CLEAR_VALUE, "true");
		result.put(RfConstant.PERSISTENT_VALUE, perResult);
		/*定义重定向标记*/
		result.put(RfConstant.FORWARD_VALUE, "success");
		//System.out.println("skuTaskItemCommit().return()="+result.toString());
		return result;
	}
	
	/*根据作业单ID获取SKU作业任务列表*/
	public List<RfSkuTaskVo> getSKUTaskItemList(Long workDocId,String andHql){
		StringBuffer workDocHql = new StringBuffer("select new com.vtradex.wms.rfserver.bean.RfSkuTaskVo(");
		workDocHql.append("t.workDoc.id, ");
		workDocHql.append("t.id, ");
		workDocHql.append("t.workDoc.id, ");
		workDocHql.append("i.code, ");
		workDocHql.append("i.name, ");
		workDocHql.append("t.planQty, ");
		workDocHql.append("t.putawayQty, ");
		workDocHql.append("u.unit, ");
		workDocHql.append("t.inventoryStatus, ");
		workDocHql.append("l.code, ");
		workDocHql.append("k.lotInfo.lot, ");
		workDocHql.append("k.lotInfo.productDate )");
		workDocHql.append("from WmsTask t ");
		workDocHql.append("left join t.item i ");
		workDocHql.append("left join t.packageUnit u ");
		workDocHql.append("left join t.itemKey k ");
		workDocHql.append("left join t.toLocation l ");
		workDocHql.append("where 1=1 ");
		workDocHql.append("and t.workDoc.id = :workDocId ");
		workDocHql.append("and t.status in ('"+WmsTaskStatus.ENABLED+"','"+WmsTaskStatus.IN_OPERATION+"') ");
		workDocHql.append("order by l.putawaySequence asc ");
		if (!StringUtils.isEmpty(andHql)) {
			workDocHql.insert(workDocHql.indexOf("1=1")+3, " "+andHql+" ");
		}
		return this.commonDao.findByQuery(workDocHql.toString(), new String[]{"workDocId"}, new Object[]{workDocId});
	}
}
