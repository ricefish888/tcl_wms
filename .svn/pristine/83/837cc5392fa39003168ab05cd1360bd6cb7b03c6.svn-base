package com.vtradex.wms.server.service.sap.pojo;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.springframework.scripting.bsh.BshScriptFactory;

import java.util.Set;

import com.vtradex.thorn.server.exception.BusinessException;
import com.vtradex.thorn.server.model.EntityFactory;
import com.vtradex.thorn.server.model.UpdateInfo;
import com.vtradex.thorn.server.model.interfaceLog.InterfaceLog;
import com.vtradex.thorn.server.model.message.Task;
import com.vtradex.thorn.server.model.security.ThornUser;
import com.vtradex.thorn.server.service.WorkflowManager;
import com.vtradex.thorn.server.service.pojo.DefaultBaseManager;
import com.vtradex.thorn.server.util.DateUtil;
import com.vtradex.thorn.server.web.security.BaseOrganizationHolder;
import com.vtradex.wms.server.model.component.Contact;
import com.vtradex.wms.server.model.entity.base.MidSurpplierUser;
import com.vtradex.wms.server.model.entity.base.Wms2SapInterfaceLog;
import com.vtradex.wms.server.model.entity.base.WmsCostCenter;
import com.vtradex.wms.server.model.entity.base.WmsCustomer;
import com.vtradex.wms.server.model.entity.base.WmsFactoryWarehouse;
import com.vtradex.wms.server.model.entity.base.WmsFactoryXmlb;
import com.vtradex.wms.server.model.entity.base.WmsItemFactory;
import com.vtradex.wms.server.model.entity.base.WmsSapFactory;
import com.vtradex.wms.server.model.entity.base.WmsSapWarehouse;
import com.vtradex.wms.server.model.entity.base.WmsSupplier;
import com.vtradex.wms.server.model.entity.email.EmailRecordType;
import com.vtradex.wms.server.model.entity.inventory.TclWmsInventoryLedger;
import com.vtradex.wms.server.model.entity.item.UnitLevel;
import com.vtradex.wms.server.model.entity.item.WmsBillType;
import com.vtradex.wms.server.model.entity.item.WmsCompany;
import com.vtradex.wms.server.model.entity.item.WmsItem;
import com.vtradex.wms.server.model.entity.item.WmsItemJITAtt;
import com.vtradex.wms.server.model.entity.item.WmsLotRule;
import com.vtradex.wms.server.model.entity.item.WmsMasterGroup;
import com.vtradex.wms.server.model.entity.item.WmsPackageUnit;
import com.vtradex.wms.server.model.entity.order.ConfirmStatus;
import com.vtradex.wms.server.model.entity.order.PurchaseOrder;
import com.vtradex.wms.server.model.entity.order.PurchaseOrderDetail;
import com.vtradex.wms.server.model.entity.order.PurchaseOrderStatus;
import com.vtradex.wms.server.model.entity.order.WmsCheckOrder;
import com.vtradex.wms.server.model.entity.order.WmsCheckOrderStatus;
import com.vtradex.wms.server.model.entity.pickticket.WmsPickTicket;
import com.vtradex.wms.server.model.entity.pickticket.WmsPickTicketDetail;
import com.vtradex.wms.server.model.entity.production.ProductionOrder;
import com.vtradex.wms.server.model.entity.production.ProductionOrderDetail;
import com.vtradex.wms.server.model.entity.production.ProductionOrderStatus;
import com.vtradex.wms.server.model.entity.production.WmsDeliveryOrder;
import com.vtradex.wms.server.model.entity.production.WmsDeliveryOrderBillType;
import com.vtradex.wms.server.model.entity.production.WmsDeliveryOrderCreatedType;
import com.vtradex.wms.server.model.entity.production.WmsDeliveryOrderDetail;
import com.vtradex.wms.server.model.entity.production.WmsDeliveryOrderStatus;
import com.vtradex.wms.server.model.entity.production.WmsReservedOrder;
import com.vtradex.wms.server.model.entity.production.WmsReservedOrderDetail;
import com.vtradex.wms.server.model.entity.receiving.WmsASN;
import com.vtradex.wms.server.model.entity.receiving.WmsASNDetail;
import com.vtradex.wms.server.model.entity.receiving.WmsASNStatus;
import com.vtradex.wms.server.model.entity.warehouse.WmsLocation;
import com.vtradex.wms.server.model.entity.warehouse.WmsWarehouse;
import com.vtradex.wms.server.model.entity.workdoc.WmsTask;
import com.vtradex.wms.server.model.entity.workdoc.WmsWorkDoc;
import com.vtradex.wms.server.model.enums.BaseStatus;
import com.vtradex.wms.server.model.enums.WmsPickticketGenType;
import com.vtradex.wms.server.service.emailrecord.EmailRecordManager;
import com.vtradex.wms.server.service.model.interfaceLog.InterfaceLogFunction;
import com.vtradex.wms.server.service.model.interfaceLog.InterfaceLogStatus;
import com.vtradex.wms.server.service.model.interfaceLog.InterfaceLogTaskType;
import com.vtradex.wms.server.service.production.ProductionOrderManager;
import com.vtradex.wms.server.service.sap.SapRowDataDealManager;
import com.vtradex.wms.server.service.sequence.WmsBussinessCodeManager;
import com.vtradex.wms.server.service.supplier.WmsSupplierManager;
import com.vtradex.wms.server.service.workdoc.WmsTclWorkDocManager;
import com.vtradex.wms.server.utils.StringHelper;
import com.vtradex.wms.webservice.model.SapInterfaceType;
import com.vtradex.wms.webservice.model.TaskSubscriber;
import com.vtradex.wms.webservice.sap.model.SapCheckOrder;
import com.vtradex.wms.webservice.sap.model.SapCheckOrderArray;
import com.vtradex.wms.webservice.sap.model.SapCostCenter;
import com.vtradex.wms.webservice.sap.model.SapCostCenterArray;
import com.vtradex.wms.webservice.sap.model.SapDeliveryOrder;
import com.vtradex.wms.webservice.sap.model.SapDeliveryOrderArray;
import com.vtradex.wms.webservice.sap.model.SapItem;
import com.vtradex.wms.webservice.sap.model.SapItemArray;
import com.vtradex.wms.webservice.sap.model.SapJSCheckOrder;
import com.vtradex.wms.webservice.sap.model.SapJSCheckOrderArray;
import com.vtradex.wms.webservice.sap.model.SapPo;
import com.vtradex.wms.webservice.sap.model.SapPoArray;
import com.vtradex.wms.webservice.sap.model.SapProductOrder;
import com.vtradex.wms.webservice.sap.model.SapProductOrderArray;
import com.vtradex.wms.webservice.sap.model.SapProductOrderIn;
import com.vtradex.wms.webservice.sap.model.SapProductOrderInArray;
import com.vtradex.wms.webservice.sap.model.SapReservedData;
import com.vtradex.wms.webservice.sap.model.SapReservedDataArray;
import com.vtradex.wms.webservice.sap.model.SapReturnOrderCode;
import com.vtradex.wms.webservice.sap.model.SapReturnOrderCodeArray;
import com.vtradex.wms.webservice.sap.model.SapSaleOutDelivery;
import com.vtradex.wms.webservice.sap.model.SapSaleOutDeliveryArray;
import com.vtradex.wms.webservice.sap.model.SapSupplier;
import com.vtradex.wms.webservice.sap.model.SapSupplierArray;
import com.vtradex.wms.webservice.sap.model.SapWarehouse;
import com.vtradex.wms.webservice.sap.model.SapWarehouseArray;
import com.vtradex.wms.webservice.utils.Arith;
import com.vtradex.wms.webservice.utils.CommonHelper;
import com.vtradex.wms.webservice.utils.EmailHelper;
import com.vtradex.wms.webservice.utils.ExcelHelper;
import com.vtradex.wms.webservice.utils.WebServiceHelper;
import com.vtradex.wms.webservice.utils.XMLHelper;

/**SAP 接口数据处理类*/
public class DefaultSapRowDataDealManager extends DefaultBaseManager implements SapRowDataDealManager {
	
	private WmsSupplierManager supplierManager;
	private WorkflowManager workflowManager;
	private ProductionOrderManager productionOrderManager;
	private WmsBussinessCodeManager wmsBussinessCodeManager;
	
	private static String excelPath ="E:\\";//对账单生成的excel存放路径
	
	public DefaultSapRowDataDealManager(WmsSupplierManager supplierManager,WorkflowManager workflowManager,
			ProductionOrderManager productionOrderManager,WmsBussinessCodeManager wmsBussinessCodeManager) {
		this.supplierManager = supplierManager;
		this.workflowManager = workflowManager;
		this.productionOrderManager = productionOrderManager;
		this.wmsBussinessCodeManager = wmsBussinessCodeManager;
	}
    
    public void storeInterfaceLog2(InterfaceLog interfaceLog,String responseXml) {
		this.storeInterfaceLog(interfaceLog, responseXml,"");
	}
    
    public void storeInterfaceLog(InterfaceLog interfaceLog,String responseXml,String errorInfo) {
		interfaceLog.setResponseContent(responseXml);
		interfaceLog.setResponse("");
		interfaceLog.setErrorLog(StringHelper.substring(errorInfo, 255));
		commonDao.store(interfaceLog);
	}
    
	/**处理物料*/
    public void dealSapItem(SapItemArray sapItemArray) {

        WebServiceHelper.println("开始处理sap单条物料信息");
//        String type = sapItemArray.getTYPE();

        SapItem[] items = sapItemArray.getSapItems();
        for (SapItem sapItem : items) {
        	
        	StringHelper.assertNullOrEmpty(sapItem.getMEINS(), "MEINS属性不能为空");
        	StringHelper.assertNullOrEmpty(sapItem.getEKGRP(), "EKGRP属性不能为空");
        	
        	updateWmsItem(sapItem);
		}
        System.out.println("sap单条物料信息处理完成");
    }
    
    /**根据默认获取批次规则*/
    private WmsLotRule getDefaultLotRule() {
    	List<WmsLotRule> lotRules = commonDao.findByQuery("FROM WmsLotRule WHERE name LIKE :name", "name", "%默认%");
    	if(lotRules.isEmpty()) {
    		throw new BusinessException("未找到默认批次规则");
    	}
    	if(lotRules.size()>1) {
    		throw new BusinessException("根据默认找到了"+lotRules.size()+"条批次规则");
    	}
    	return lotRules.get(0);
    }
    /**根据编码获取物料*/
    private WmsItem getItemByCode(String code) {
    	List<WmsItem> items = commonDao.findByQuery("FROM WmsItem WHERE code=:code", "code", code);
    	
    	if(items.isEmpty()) {
    		return null;
    	}
    	if(items.size()>1) {
    		throw new BusinessException("根据编码"+code+"找到了"+items.size()+"条物料");
    	}
    	return items.get(0);
    }
    /**根据编码获取SAP工厂*/
    private WmsSapFactory getSapFactoryByCode(String code){
		  List<WmsSapFactory> factorys = (List<WmsSapFactory>) commonDao.findByQuery("FROM WmsSapFactory WHERE code=:code", 
	              "code", code);
	      if (factorys.isEmpty()) {
	          throw new BusinessException("未维护编码【"+code+"】的SAP工厂信息!");
	      }
          
	      	if(factorys.size()>1) {
	      		throw new BusinessException("根据编码"+code+"找到了"+factorys.size()+"条SAP工厂信息");
	      	}
	      	return factorys.get(0);
    }
    /**根据编码获取供应商*/
    private WmsSupplier getSupplierByCode(String code) {
    	List<WmsSupplier> sups = commonDao.findByQuery("FROM WmsSupplier surpplier where surpplier.code=:sc", "sc", code);
    	if(sups.isEmpty()) {
    		return null;
    	}
    	if(sups.size()>1) {
      		throw new BusinessException("根据编码"+code+"找到了"+sups.size()+"条供应商信息");
      	}
    	return sups.get(0);
    }
    /**根据采购单号和行项目获取采购交货单明细*/	
    private WmsDeliveryOrderDetail getDeliveryOrderDetail(String poNo,String poDetailNo,String deliveryOrderCode){
    	String hql = "FROM WmsDeliveryOrderDetail dod WHERE dod.poNo =:poNo AND dod.poDetailNo =:poDetailNo AND dod.deliveryOrder.code=:code ";
        List<WmsDeliveryOrderDetail> details = commonDao.findByQuery(hql, new String[]{"poNo","poDetailNo","code"}, new Object[]{poNo,poDetailNo,deliveryOrderCode});
        if(details.isEmpty()){
        	return null;
        }
        if(details.size()>1){
        	throw new BusinessException("根据采购单号"+poNo+"和采购单行项目"+poDetailNo+"找到了"+details.size()+"条交货单明细");
        }
        return details.get(0);
    }
    /**根据SAP交货单号*/
    private WmsDeliveryOrder getDeliveryOrderBySapCode(String code){
    	List<WmsDeliveryOrder> deliveryOrders = commonDao.findByQuery("FROM WmsDeliveryOrder "
                + "WHERE sapCode=:sapCode ", new String[]{"sapCode"}, new Object[]{code});
    	if(deliveryOrders.isEmpty()){
        	return null;
        }
        if(deliveryOrders.size()>1){
        	throw new BusinessException("根据SAP交货单号"+code+"找到了"+deliveryOrders.size()+"条交货单");
        }
        return deliveryOrders.get(0);
    }
    /**根据采购单号和行项目获取采购明细*/
    private PurchaseOrderDetail getPurchaseOrderDetail(String poCode,String ebelp){
    	String podHql = "FROM PurchaseOrderDetail pod where pod.purchaseOrder.code=:pdc and pod.ebelp=:pe";
        List<PurchaseOrderDetail> pords = commonDao.findByQuery(podHql, new String[]{"pdc","pe"}, new Object[]{poCode,ebelp});
        if(pords.isEmpty()){
        	throw new BusinessException("根据采购单"+poCode+"和行项目"+ebelp+"未找到采购订单明细");
        }
        if(pords.size()>1){
        	throw new BusinessException("根据采购单号"+poCode+"和行项目"+ebelp+"找到了"+pords.size()+"条采购单明细");
        }
        return pords.get(0);
    }
    /**根据物料和单位获取包装*/
    private WmsPackageUnit getWmsPackageUnitByItem(Long itemId,String unit){
    	List<WmsPackageUnit> pkus = commonDao.findByQuery("FROM WmsPackageUnit "
                + "WHERE item.id=:itemId AND unit=:code",  
                new String[]{"itemId", "code"},  new Object[]{itemId, unit});
        if (pkus.isEmpty()) {
            throw new BusinessException("WMS物料ID【"+itemId+"】的包装单位【"+unit+"】未维护");
        }
        if(pkus.size()>1){
        	throw new BusinessException("根据物料ID"+itemId+"和单位"+unit+"找到了"+pkus.size()+"条包装单位信息");
        }
        return pkus.get(0);
    }
    /**获取默认货主*/
    private WmsCompany getDefaultWmsCompany(){
    	List<WmsCompany> companys = commonDao.findByQuery("FROM WmsCompany  WHERE name LIKE :name", "name", "%默认%");
    	if (companys.isEmpty()) {
            throw new BusinessException("未找到默认获取");
        }
        if(companys.size()>1){
        	throw new BusinessException("找到多个默认货主");
        }
        return companys.get(0);
    }
    /**根据供应商ID获取供应商用户关系*/
    private MidSurpplierUser getMidSurpplierUserBySupplierId(Long supplierId){
    	List<MidSurpplierUser> msus = commonDao.findByQuery("FROM MidSurpplierUser msu where msu.sid=:ms", "ms", supplierId);
		if(msus.isEmpty()){
			return null;
		}
		if(msus.size()>1){
			throw new BusinessException("根据供应商ID"+supplierId+"找到多条供应商用户关系");
		}
    	return msus.get(0);
    }
    /**根据编码获取客户*/
    private WmsCustomer getWmsCustomerByCode(String code){
    	String hql = "FROM WmsCustomer cus WHERE cus.code =:code AND cus.status =:status ";
        List<WmsCustomer> customers = commonDao.findByQuery(hql, new String[]{"code","status"}, new Object[]{code,BaseStatus.ENABLED});
        if(customers.isEmpty()){
			return null;
		}
		if(customers.size()>1){
			throw new BusinessException("根据客户编码"+code+"找到多条客户数据");
		}
		return customers.get(0);
    }
    /**获取对账单*/
    private WmsCheckOrder getWmsCheckOrder(String supplierCode,String code){
    	String hql = "FROM WmsCheckOrder o WHERE o.supplier.code =:supplierCode AND o.code=:code ";
		List<WmsCheckOrder> orders = commonDao.findByQuery(hql, new String[]{"supplierCode","code"}, new Object[]{supplierCode,code});
		if(orders.isEmpty()){
			return null;
		}
		if(orders.size()>1){
			throw new BusinessException("根据供应商编码"+supplierCode+"和对账单编码"+code+"找到多条对账单数据");
		}
		return orders.get(0);
    }
    /**处理物料信息*/
	private void updateWmsItem(SapItem sapItem) {
		String code = sapItem.getMATNR();
        WmsItem item = getItemByCode(code);
        WmsLotRule lotRule = getDefaultLotRule();
        
        if (null==item) {
            item = EntityFactory.getEntity(WmsItem.class);
            item.setCode(code);
        }
        try {
            item.setBarCode(sapItem.getMATNR());
            item.setName(sapItem.getMAKTX());
            item.setLotRule(lotRule);
            item.setCountLotRule(lotRule);
            item.setBaseUnit(sapItem.getMEINS());
            item.setDescription(sapItem.getWGBEZ());
            item.setUserFieldV4(sapItem.getEKGRP());//采购组
            item.setUserFieldV6(sapItem.getMTART());//物料类型
            item.setUserFieldV7(sapItem.getMMSTA());//跨工厂物料状态
            item.setUserFieldV8(sapItem.getMATKL());//物料组
            item.setUserFieldV9(sapItem.getEKNAM());//采购组描述
            if (item.isNew()) {
                item.setMasterGroup(lotRule.getMasterGroup());
                WmsPackageUnit packageUnit = EntityFactory.getEntity(WmsPackageUnit.class);
        		//设置数字1为默认的拆箱级别
        		packageUnit.setConvertFigure(1D);
        		packageUnit.setUnit(item.getBaseUnit());
        		packageUnit.setUnitLevel(UnitLevel.A);
        		packageUnit.setWeight(item.getWeight());
        		packageUnit.setVolume(item.getVolume());
        		packageUnit.setDescription(sapItem.getMSEHT());
        		item.addPackageUnit(packageUnit);
//        		workflowManager.doWorkflow(item, "itemProcess.new");
            }
            commonDao.store(item);
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new BusinessException("WMS系统生成物料信息异常!");
        }
        
        WmsSapFactory factory =getSapFactoryByCode(sapItem.getWERKS()); 
        List<WmsItemFactory> itemFactorys = ( List<WmsItemFactory>) commonDao.findByQuery("FROM WmsItemFactory "
                + "WHERE item.id=:itemId AND factory.id=:factoryId", 
                new String[]{"itemId", "factoryId"}, new Object[]{item.getId(), factory.getId()});
        
        if (itemFactorys.isEmpty()) {
        	WmsItemFactory itemFactory = EntityFactory.getEntity(WmsItemFactory.class);
            itemFactory.setItem(item);
            itemFactory.setFactory(factory);
            commonDao.store(itemFactory);
        }
	}

	
	/**处理仓库*/
    public void dealSapWarehouse(SapWarehouseArray sapWarehouseArray) {

        System.out.println("开始处理sap单条仓库信息");
        SapWarehouse[] sws = sapWarehouseArray.getSapWarehouses();
//        String type = sapWarehouseArray.getType();//类型
        for(SapWarehouse warehouse : sws) {
        	StringHelper.assertNullOrEmpty(warehouse.getWERKS(), "WERKS属性不能为空");
        	updateWmsWarehouse(warehouse);
        }
    }
    /**更新仓库信息*/
	private void updateWmsWarehouse(SapWarehouse warehouse) {
		WmsSapWarehouse house = (WmsSapWarehouse)commonDao.findByQueryUniqueResult("FROM WmsSapWarehouse house where house.code=:hc", "hc", warehouse.getLGORT());;
    	if(house==null){
    		//新增
    		house = EntityFactory.getEntity(WmsSapWarehouse.class);
    	}
        WmsSapFactory factory = this.getSapFactoryByCode(warehouse.getWERKS());
        house.setSapFactory(factory);
        house.setCode(warehouse.getLGORT());
        house.setName(warehouse.getLGOBE());
        commonDao.store(house);
	}

	/**处理供应商*/
    public void dealSapSupplier(SapSupplierArray sapSupplierArray) {
        System.out.println("开始处理sap单条供应商信息");
        SapSupplier[] suppliers = sapSupplierArray.getSapSuppliers();
   
    	for(SapSupplier sapSupplier : suppliers) {
    		StringHelper.assertNullOrEmpty(sapSupplier.getLIFNR(), "LIFNR属性不能为空");
    		
    		WmsSupplier supplier = this.getSupplierByCode(sapSupplier.getLIFNR());
    		if(null!=sapSupplier.getLOEVM()){ //删除
    			if(supplier!=null) {
	    			 try {
		   				  supplierManager.unActiveSurpplier(supplier);
		   			} catch (Exception e) {
		   				throw new BusinessException("供应商删除失败!!编码为:"+supplier.getCode());
		   			}
    			}
    		}
    		else {//新增修改
	    		if(supplier ==null){//新增
	    			supplier = EntityFactory.getEntity(WmsSupplier.class);
	    		}
	    		try {
	    			updateWmsSupplier(supplier,sapSupplier);
	    		} catch (Exception e) {
	    			e.printStackTrace();
	    			throw new BusinessException("供应商处理失败!编码为:"+supplier.getCode());
	    		}
    		}
    	}
       
    }
    /**处理供应商*/
	private void updateWmsSupplier(WmsSupplier wmsSupplier,SapSupplier sapSupplier) {
			  wmsSupplier.setCode(sapSupplier.getLIFNR());
			  wmsSupplier.setName(sapSupplier.getNAME1());
			  wmsSupplier.setStatus(BaseStatus.ENABLED);
			  
			  Contact contact = new Contact();
			  contact.setTelephone(sapSupplier.getTELF1()==null?"":sapSupplier.getTELF1());
			  contact.setMobile(sapSupplier.getTELF2()==null?"":sapSupplier.getTELF2());
			  contact.setPostCode(sapSupplier.getPSTLZ());
			  
			  wmsSupplier.setContact(contact);
			  wmsSupplier.setAccountGroup(sapSupplier.getKTOKK());
			  wmsSupplier.setSearchStr(sapSupplier.getSORTL());
			  wmsSupplier.setEmail1(sapSupplier.getSMTP_ADDR1());
			  wmsSupplier.setEmail2(sapSupplier.getSMTP_ADDR2());
			  wmsSupplier.setEmail3(sapSupplier.getSMTP_ADDR3());
			  supplierManager.storeSurpplier(wmsSupplier);
	}
	/**处理成本中心*/
	public void dealSapCostCenter(SapCostCenterArray sccs){
		System.out.println("开始成本中心主数据................");
//		String type = sccs.getTYPE();
		for(SapCostCenter scc : sccs.getSccs()){
			StringHelper.assertNullOrEmpty(scc.getKOSTL(), "KOSTL属性不能为空");
			StringHelper.assertNullOrEmpty(scc.getDATBI(), "DATBI属性不能为空");
			//格式判断
			try {
				DateUtil.getDate(scc.getDATBI(),"yyyyMMdd");
			}
			catch(Exception e) {
				throw new BusinessException(scc.getDATBI()+"转换成日期yyyyMMdd失败");
			}
			
			List<WmsCostCenter> costs = commonDao.findByQuery("FROM WmsCostCenter cost WHERE cost.code =:code ", "code", scc.getKOSTL());
			WmsCostCenter cost = null;
	    	if(costs.isEmpty()) {
	    		cost = EntityFactory.getEntity(WmsCostCenter.class);
	    	}
	    	if(costs.size()>1) {
	      		throw new BusinessException("根据编码"+scc.getKOSTL()+"找到了"+costs.size()+"条成本中心");
	      	}
	    	if(costs.size()==1) {
	    		cost = costs.get(0);
	    	}
	    	saveOrUpdateCostCenter(scc, cost);
		}
	}
	/**处理成本中心*/
	private void saveOrUpdateCostCenter(SapCostCenter scc,WmsCostCenter cost){
		if(DateUtil.formatDate(scc.getDATBI()).after(new Date())){
			cost.setCode(scc.getKOSTL());
			cost.setName(scc.getKTEXT());
			cost.setXxpirationDate(DateUtil.formatDate(scc.getDATBI()));
			commonDao.store(cost);
		}
	}
	
	/**采购交货单信息*/
	public void dealSapDeliveryOrder(SapDeliveryOrderArray spoas) {
        
        System.out.println("开始处理sap单条采购交货单信息");
        String type = spoas.getTYPE();
        int i = 0;
        for(SapDeliveryOrder order : spoas.getSpoas()){
        	StringHelper.assertNullOrEmpty(order.getPOSNR(), "POSNR属性不能为空");
        	WmsDeliveryOrder deliveryOrder = this.getDeliveryOrderBySapCode(order.getVBELN());
        	i++;
        	try {
        		if(deliveryOrder ==null){
            		deliveryOrder = EntityFactory.getEntity(WmsDeliveryOrder.class);
            	}
                if (!"D".equals(type)) {  // 新增/修改
                    saveOrUpdateDeliveryOrder(order, deliveryOrder, type,i);
                }
                else if ("D".equals(type)) { //删除
                	try {
                		List<WmsDeliveryOrderDetail> details = commonDao.findByQuery(" FROM WmsDeliveryOrderDetail d WHERE d.deliveryOrder.sapCode=:sapCode AND d.deliveryOrder.project=:project ",  new String[]{"sapCode","project"}, new Object[]{order.getVBELN(),order.getPOSNR()});
                		for(WmsDeliveryOrderDetail detail : details){
                			commonDao.delete(detail);
                		}
                		if(deliveryOrder !=null ){
                			commonDao.delete(deliveryOrder);
                		}
					} catch (Exception e) {
						e.printStackTrace();
						throw new BusinessException("交货单删除失败!!");
					}
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                throw new BusinessException("类型:"+type + ",sap单条采购交货单处理失败。"+StringHelper.substring(CommonHelper.getErrorMessageByException(ex), 255));
            }
        }
    }
	
	private void saveOrUpdateDeliveryOrder(SapDeliveryOrder order, WmsDeliveryOrder deliveryOrder, String type,int i) {
		
        deliveryOrder.setSapCode(order.getVBELN());
        if(deliveryOrder.getCode()==null){
        	deliveryOrder.setCode(order.getVBELN());
        }
        deliveryOrder.setStatus(WmsDeliveryOrderStatus.OPEN);
        //供应商
        WmsSupplier supplier = this.getSupplierByCode(order.getLIFNR());
        if (supplier==null) {
            throw new BusinessException("WMS供应商【"+order.getLIFNR()+"】未维护");
        }
        createEmailRecord(supplier, order);//生成邮件
        deliveryOrder.setSupplier(supplier);
        deliveryOrder.setDeliveryDate(DateUtil.formatDate(order.getLFDAT()));
        deliveryOrder.setCreatedType(WmsDeliveryOrderCreatedType.SYSTEM);
        deliveryOrder.setProject(order.getPOSNR());
        WmsDeliveryOrderDetail detail= this.getDeliveryOrderDetail(order.getVGBEL(),order.getVGPOS(),order.getVBELN());
        if (detail == null) {
            UpdateInfo updateInfo = new UpdateInfo();
            updateInfo.setCreatedTime(new Date());
            updateInfo.setCreator(order.getERNAM());
            deliveryOrder.setUpdateInfo(updateInfo);
            deliveryOrder.setBillTypeName(WmsDeliveryOrderBillType.CGBILLTYPE);
            deliveryOrder.setConfirmStatus(ConfirmStatus.OPEN);
            detail = EntityFactory.getEntity(WmsDeliveryOrderDetail.class);
            detail.setLineNo(i); // 明细行号 当前单明细
            detail.setPosnr(order.getPOSNR());
            updateDoDetail(detail,deliveryOrder,order);
        } else {
            deliveryOrder.getUpdateInfo().setLastOperator(order.getERNAM());
            deliveryOrder.getUpdateInfo().setUpdateTime(new Date());
            if(ConfirmStatus.CONFIRM.equals(deliveryOrder.getConfirmStatus())||ConfirmStatus.RECEIVED.equals(deliveryOrder.getConfirmStatus())){
            	deliveryOrder.setConfirmStatus(ConfirmStatus.OPEN);
            }
            //如果是收货完成
            if(WmsDeliveryOrderStatus.FINISH.equals(deliveryOrder.getStatus())){
            	throw new BusinessException("交货单已收货完成修改失败!!!");
            }else{
            	Set<WmsDeliveryOrderDetail> details = deliveryOrder.getDetails();
            	for (WmsDeliveryOrderDetail deta : details) {
            		//交货单数量增加
            		if(Arith.sub(deta.getTheDeliveryQuantityBu(),Double.parseDouble(order.getDABMG()))<=0){
            			//获取PO单数量
            			PurchaseOrder po = deta.getPurchaseOrderDetail().getPurchaseOrder();
            			double d1 = po.getReceiveQty();//收货数量
            			if(Arith.sub(Double.parseDouble(order.getDABMG()),d1)>=0){
            				//增加数量大于PO单的收货数量
            				throw new BusinessException("修改数量大于采购订单收货数量请先修改采购订单数量!!!");
            			}else{
            				//增加数量小于PO单的收货数量
            				updateDoDetail(deta,deliveryOrder,order);
            			}
            		}else{
            			//交货单数量减少
            			updateDoDetail(deta,deliveryOrder,order);
            		}
            	}
            }
        }
    }
	
	private void updateDoDetail(WmsDeliveryOrderDetail detail,WmsDeliveryOrder deliveryOrder,SapDeliveryOrder order) {
		detail.setDeliveryOrder(deliveryOrder);
        WmsItem item = this.getItemByCode(order.getMATNR());
        if (item==null) {
            throw new BusinessException("WMS物料【"+order.getMATNR()+"】未维护");
        }
        detail.setItem(item);
        WmsSapFactory factory = this.getSapFactoryByCode(order.getWERKS());
        detail.setFactory(factory);
        detail.setKcdd(order.getLGORT());
        detail.setPlanQuantityBu(Double.parseDouble(order.getLFIMG()==null?"0":order.getDABMG()));
        detail.setTheDeliveryQuantityBu(Double.parseDouble(order.getDABMG()==null?"0":order.getDABMG()));
        detail.setDelivedQuantityBu(0D);//已交货数量
        detail.setPoNo(order.getVGBEL());
        detail.setPoDetailNo(order.getVGPOS());
        //保存采购订单明细
        PurchaseOrderDetail pord = this.getPurchaseOrderDetail(order.getVGBEL(),order.getVGPOS());
       	detail.setPurchaseOrderDetail(pord);
        WmsPackageUnit pku = this.getWmsPackageUnitByItem(item.getId(), order.getMEINS());
        detail.setPackageUnit(pku);
        detail.setExtend1(order.getWBSTK());//货物移动状态
        //仓库
        String pstype = detail.getPurchaseOrderDetail().getPstyp();
        WmsWarehouse house = null;
        if(null!=pstype){
        	String houseHql = "SELECT wfw.warehouse FROM WmsFactoryWarehouse wfw where wfw.factory=:wf and wfw.type=:wt";
        	house = (WmsWarehouse)commonDao.findByQueryUniqueResult(houseHql, new String[]{"wf","wt"}, new Object[]{factory,pstype});
        }
        if(null!=house){
        	deliveryOrder.setWarehouse(house);
        	commonDao.store(deliveryOrder);
        	commonDao.store(detail);
        }
	}

	@SuppressWarnings("unchecked")
	public void dealSapPoOrders(SapPoArray poArray) {
		System.out.println("开始处理Sap采购订单");
		int i=0;
		for(SapPo po : poArray.getSapPos()) {
			StringHelper.assertNullOrEmpty(po.getEINDT(), "EINDT属性不能为空");
			i++;
			PurchaseOrder order = null;
			List<PurchaseOrder> orders = commonDao.findByQuery("FROM PurchaseOrder order where order.code=:oc", "oc", po.getEBELN());
			if(orders.size()>1){
				throw new BusinessException("根据采购单号"+po.getEBELN()+"找到多条记录");
			}
			if(orders.size()==1){
				order = orders.get(0);
			}
			updateSapPoOrder(po,order,i);
			
			if(null!=po.getLOEKZ()){
				//删除采购订单
				String lineNo = po.getLOEKZ();
				String detailHql = "FROM PurchaseOrderDetail detail where detail.lineNo=:dl and detail.purchaseOrder=:dp";
				String checkHql = "FROM WmsDeliveryOrderDetail wd where wd.purchaseOrderDetail=:wp";
				List<WmsDeliveryOrderDetail> wdods = null;
				PurchaseOrderDetail detail = null;
				try {
					detail = (PurchaseOrderDetail)commonDao.findByQueryUniqueResult(detailHql, new String[]{"dl","dp"}, new Object[]{lineNo,order});
					wdods = commonDao.findByQuery(checkHql, "wp", detail);
				} catch (Exception e) {
					e.printStackTrace();
					throw new BusinessException("查询采购订单数据异常!!!");
				}
				if(wdods.size()>0){
					throw new BusinessException("采购订单已关联到交货单删除失败!!");
				}
				if(null!=detail){
					order.removeDetail(detail);
				}
			}
		}
	}
	private void updateSapPoOrder(SapPo po,PurchaseOrder order,int row) {
        if(order == null){
			//新增
        	order.setStatus(PurchaseOrderStatus.OPEN);
        	order.setConfirmStatus(ConfirmStatus.OPEN);
        	UpdateInfo updateInfo = new UpdateInfo();
            updateInfo.setCreatedTime(new Date());//创建时间
            updateInfo.setCreator(po.getERNAM());//订单创建人
            order.setUpdateInfo(updateInfo);
        }else{
        	//修改
    		order.getUpdateInfo().setLastOperator(po.getERNAM());//订单创建人
    		order.getUpdateInfo().setUpdateTime(new Date());//更新时间
    		if(order.getConfirmStatus().equals(ConfirmStatus.CONFIRM)||order.getConfirmStatus().equals(ConfirmStatus.RECEIVED)){
    			order.setConfirmStatus(ConfirmStatus.OPEN);
    		}
        }
        order.setCode(po.getEBELN());//采购订单号
		order.setBsart(po.getBSART());//采购订单类型
		order.setCreatDate(DateUtil.formatDate(po.getAEDAT()));//订单创建日期
		WmsSupplier supplier = this.getSupplierByCode(po.getLIFNR()); 
        if (supplier==null) {
            throw new BusinessException("WMS供应商【"+po.getLIFNR()+"】不存在");
        }
		WmsCompany company = this.getDefaultWmsCompany();
		order.setCompany(company);
        createEmailRecord(supplier,po);//生成邮件
        order.setSupplier(supplier);//WMS供应商
        order.setQty(new Double(po.getMENGE()));//订单数量
        order.setEkorg(po.getEKORG());//采购组织
        order.setEkgrp(po.getEKGRP());//采购组
        order.setUserField3(po.getLOEKZ()==null?"":po.getLOEKZ());//删除标识
        order.setUserField4(po.getRETPO()==null?"":po.getRETPO());//退货标识 
        commonDao.store(order);
        //明细数量
        PurchaseOrderDetail detail = null;
        String hql = "FROM PurchaseOrderDetail detail WHERE detail.purchaseOrder.code =:code AND detail.ebelp =:ebelp ";
        List<PurchaseOrderDetail> details  = commonDao.findByQuery(hql, 
        		new String[]{"code","ebelp"}, new Object[]{order.getCode(),po.getEBELP()});
        if(details.size()>1){
        	throw new BusinessException("根据采购单号"+order.getCode()+"和行项目"+po.getEBELP()+"找到多条明细");
        }
        if(details.size()==1){
        	detail = details.get(0);
        }
        if(detail == null){
        	//新建明细
        	detail = EntityFactory.getEntity(PurchaseOrderDetail.class);
        	updatePurchaseOrderDetail(po,order,detail,row);
        }else{
        	//修改明细
        	if(Arith.sub(detail.getExpectedPackQty(),Double.valueOf(po.getMENGE()))<=0){
        		//增加期待数量
        		updatePurchaseOrderDetail(po,order,detail,row);
        	}else{
        		//减少期待数量
        		double d1 = Double.valueOf(po.getMENGE());
        		//计算剩余交货数量
        		double d2 = Arith.sub(Arith.sub(detail.getExpectedPackQty(),detail.getAllotQty()), detail.getReceivedQty());
        		if(Arith.sub(d1, d2)<0){
        			updatePurchaseOrderDetail(po,order,detail,row);
        		}else{
        			throw new BusinessException("采购订单号为【"+order.getCode()+"】修改失败!!");
        		}
        	}
        }
	}
	private void updatePurchaseOrderDetail(SapPo po,PurchaseOrder order,PurchaseOrderDetail detail, int row) {
		detail.setPurchaseOrder(order);
    	detail.setLineNo(row); // 明细行号
    	WmsItem item = this.getItemByCode(po.getMATNR());
    	if (item==null) {
    		throw new BusinessException("WmsItem【"+po.getMATNR()+"】不存在");
    	}
    	item.setDescription(po.getTXZ01());
    	detail.setItem(item);
    	WmsSapFactory factory = this.getSapFactoryByCode(po.getWERKS()); 
    	order.setSapFactory(factory);//单头的工厂
    	detail.setFactory(factory);//明细的工厂
    	WmsPackageUnit pku = this.getWmsPackageUnitByItem(item.getId(), po.getMEINS()); 
    	detail.setPackageUnit(pku);//包装单位
    	detail.setUserField1(po.getLGORT());//库存地点
    	detail.setEbelp(po.getEBELP());//项目
    	detail.setPstyp(po.getPSTYP());//项目类别
    	detail.setReceivedDate(DateUtil.formatDate(po.getEINDT()));
    	detail.setExpectedQty(Double.valueOf(po.getMENGE()));//期待数量
    	detail.setExpectedPackQty(Double.valueOf(po.getMENGE()));//期待包装数量
    	detail.setInventoryStatus(StringHelper.isNullOrEmpty(po.getINSMK())==true?"合格":"X".equals(po.getINSMK())?"待检":"");
    	commonDao.store(detail);
    	order.addDetail(detail);
    	order.refreshQtyBU();
	}

	private void createEmailRecord(WmsSupplier supplier,Object obj) {
		if(obj instanceof SapPo){
			SapPo po = (SapPo)obj;
			String subject =EmailHelper.getTheme(EmailRecordType.PO2SUPPLIER, po.getEBELN());
			List<String> infos = new ArrayList<String>();
			infos.add(po.getEBELN());
			String content = EmailHelper.getEmailContent(EmailRecordType.PO2SUPPLIER, infos);
			
			MidSurpplierUser msu = this.getMidSurpplierUserBySupplierId(supplier.getId());
			if(null!=msu){
				ThornUser user = commonDao.load(ThornUser.class, msu.getUid());
				//每个邮箱发邮件
				String emails = user.getEmail();
				if(null!=emails){
					String [] ems = emails.split("\\|");
					for (String em : ems) {
						//异步发邮件
						EmailRecordManager emailRecordManager = (EmailRecordManager)applicationContext.getBean("emailRecordManager");
						emailRecordManager.storeEmailRecordWaitSend(user.getLoginName(),em,subject,content,EmailHelper.getEmailCc(),EmailRecordType.PO2SUPPLIER,po.getEBELN());
					}
				}
			}
		}
		if(obj instanceof SapDeliveryOrder){
			SapDeliveryOrder sdo = (SapDeliveryOrder)obj;
			String subject =EmailHelper.getTheme(EmailRecordType.DELIVERY2SUPPLIER, sdo.getVBELN());
			List<String> infos = new ArrayList<String>();
			infos.add(sdo.getVBELN());
			String content = EmailHelper.getEmailContent(EmailRecordType.DELIVERY2SUPPLIER, infos);
			MidSurpplierUser msu = this.getMidSurpplierUserBySupplierId(supplier.getId());
			if(null!=msu){
				ThornUser user = commonDao.load(ThornUser.class, msu.getUid());
				//每个邮箱发邮件
				String emails = user.getEmail();
				String [] ems = emails.split("\\|");
				for (String em : ems) {
					//异步发邮件
					EmailRecordManager emailRecordManager = (EmailRecordManager)applicationContext.getBean("emailRecordManager");
					emailRecordManager.storeEmailRecordWaitSend(user.getLoginName(),em,subject,content,EmailHelper.getEmailCc(),EmailRecordType.DELIVERY2SUPPLIER,sdo.getVBELN());
				}
			}
		}
		if(obj instanceof SapCheckOrder){
			SapCheckOrder sco = (SapCheckOrder) obj;
			String subject =EmailHelper.getTheme(EmailRecordType.CHECKBZSUPPLIER, sco.getLIFNR()+StringHelper.substring(sco.getBUDAT(), 6));
			List<String> infos = new ArrayList<String>();
			infos.add(sco.getLIFNR()+StringHelper.substring(sco.getBUDAT(), 6));
			String content = EmailHelper.getEmailContent(EmailRecordType.CHECKBZSUPPLIER, infos);
			MidSurpplierUser msu = this.getMidSurpplierUserBySupplierId(supplier.getId());
			if(null!=msu){
				ThornUser user = commonDao.load(ThornUser.class, msu.getUid());
				//每个邮箱发邮件
				String emails = user.getEmail();
				String [] ems = emails.split("\\|");
				for (String em : ems) {
					//异步发邮件
					EmailRecordManager emailRecordManager = (EmailRecordManager)applicationContext.getBean("emailRecordManager");
					emailRecordManager.storeEmailRecordWaitSend(user.getLoginName(),em,subject,content,EmailHelper.getEmailCc(),EmailRecordType.CHECKBZSUPPLIER,sco.getLIFNR()+StringHelper.substring(sco.getBUDAT(), 6));
				}
			}
		}
		if(obj instanceof SapJSCheckOrder){
			SapJSCheckOrder sco = (SapJSCheckOrder) obj;
			String subject =EmailHelper.getTheme(EmailRecordType.CHECKJSSUPPLIER, sco.getLIFNR()+StringHelper.substring(sco.getBUDAT(), 6));
			List<String> infos = new ArrayList<String>();
			infos.add(sco.getLIFNR()+StringHelper.substring(sco.getBUDAT(), 6));
			String content = EmailHelper.getEmailContent(EmailRecordType.CHECKJSSUPPLIER, infos);
			MidSurpplierUser msu = this.getMidSurpplierUserBySupplierId(supplier.getId());
			if(null!=msu){
				ThornUser user = commonDao.load(ThornUser.class, msu.getUid());
				//每个邮箱发邮件
				String emails = user.getEmail();
				String [] ems = emails.split("\\|");
				for (String em : ems) {
					//异步发邮件
					EmailRecordManager emailRecordManager = (EmailRecordManager)applicationContext.getBean("emailRecordManager");
					emailRecordManager.storeEmailRecordWaitSend(user.getLoginName(),em,subject,content,EmailHelper.getEmailCc(),EmailRecordType.CHECKJSSUPPLIER,sco.getLIFNR()+StringHelper.substring(sco.getBUDAT(), 6));
				}
			}
		}
	}
	@Override
	public void dealSapProductOrder(SapProductOrderArray spoas) {
		
		System.out.println("开始处理 Sap生产订单.........");
		String type = spoas.getTYPE();
		int i = 0;
		for(SapProductOrder spo : spoas.getSpos()){
			StringHelper.assertNullOrEmpty(spo.getMEINS1(), "MEINS1属性不能为空");
			i+=10;
			String spoCode = spo.getAUFNR();//生产订单号
			ProductionOrder order = null;
			try {
				order = (ProductionOrder)commonDao.findByQueryUniqueResult("FROM ProductionOrder order where order.code=:oc", "oc", spoCode);
			} catch (Exception e) {
				throw new BusinessException("根据生产订单号"+spoCode+"查询到多条生产订单数据!!");
			}
			boolean flag =order==null?true:false;
			if(!"D".equals(type)){
				//新增
				updateProductOrder(flag,spo,order,i);
			}
			else if("D".equals(type)){
				//关闭生产订单工单
				order.setStatus(ProductionOrderStatus.CLOSE);
				commonDao.store(order);
			}
		}
	}
	private void updateProductOrder(boolean flag, SapProductOrder spo,ProductionOrder order,int i) {
		if(order == null){
			order = EntityFactory.getEntity(ProductionOrder.class);
		}
		order.setCode(spo.getAUFNR());// 生产订单号
		WmsSapFactory factory = (WmsSapFactory) commonDao.findByQueryUniqueResult("FROM WmsSapFactory WHERE code=:code", "code", spo.getWERKS());
        if (factory==null) {
            throw new BusinessException("SAP工厂【"+spo.getWERKS()+"】不存在");
        }
        order.setFactory(factory);//工厂
        order.setCpItemCode(spo.getMATNR());//单头物料
        order.setPlanQuantity(new Double(spo.getGAMNG().trim()));//计划数量
        order.setPtype(spo.getAUART());//订单类型
        order.setBeginDate(DateUtil.formatDate(spo.getGSTRP()));//基本开始日期
        order.setEndDate(DateUtil.formatDate(spo.getGLTRP()));//基本完成日期
        order.setRemark(spo.getMAKTX());//单头物料描述
        order.setProductLine(spo.getZPRO_LINE());//生产线
        if(flag){
			//新增
        	order.setStatus(ProductionOrderStatus.OPEN);
        	UpdateInfo updateInfo = new UpdateInfo();
            updateInfo.setCreatedTime(new Date());//创建时间
            order.setUpdateInfo(updateInfo);
        }else{
        	//修改
    		order.getUpdateInfo().setUpdateTime(new Date());//更新时间
        }
        commonDao.store(order);
        String hql = "FROM ProductionOrderDetail detail WHERE detail.productionOrder.code =:code AND detail.bomCode =:bomCode ";
        ProductionOrderDetail detail  = null;
        try {
        	detail = (ProductionOrderDetail) commonDao.findByQueryUniqueResult(hql, 
        			new String[]{"code","bomCode"},
        			new Object[]{spo.getAUFNR(),spo.getPOSNR()});
		} catch (Exception e) {
			e.printStackTrace();
			throw new BusinessException("根据生产订单号"+spo.getAUFNR()+"和组件项目号"+spo.getPOSNR()+"查询到多条生产订单明细数据!!");
		}
    	if(detail == null ){
    		detail = EntityFactory.getEntity(ProductionOrderDetail.class);
    		detail.setProductionOrder(order);
    		detail.setLineNo(i);
    	}
    	WmsItem item = this.getItemByCode(spo.getMATNR1()); 
        if (item==null) {
            throw new BusinessException("明细WmsItem【"+spo.getMATNR1()+"】不存在");
        }
        detail.setItem(item);
        detail.setBomCode(spo.getPOSNR());//组件项目号
        if(spo.getXLOEK()!=null && "X".equals(spo.getXLOEK())){ //删除标识X--需求数量改为0
        	detail.setPlanQuantityBu(0D);//需求数量
        }else{
        	detail.setPlanQuantityBu(new Double(spo.getBDMNG().trim()));//需求数量
        }
        WmsPackageUnit pku = this.getWmsPackageUnitByItem(item.getId(), spo.getMEINS1());
        detail.setPackageUnit(pku);
        commonDao.store(detail);
        order.addDetail(detail);
        order.refreshQtyBU();
	}

	@Override
	public void dealSapReservedData(SapReservedDataArray datas) {
		System.out.println("开始处理 Sap预留主数据..................");
		String type = datas.getTYPE();
		int i=0;
		WmsReservedOrder wro =null;
		for (SapReservedData srd : datas.getDatas()) {
			
			i++;
			String rcode = srd.getRSNUM();//预留单号
			try {
				wro = (WmsReservedOrder)commonDao.findByQueryUniqueResult("FROM WmsReservedOrder wro where wro.code=:wc", "wc", rcode);
			} catch (Exception e) {
				e.printStackTrace();
				throw new BusinessException("查询wms预留单数据异常!!");
			}
			boolean flag =wro==null?true:false;
			if(!"D".equals(type)){
				//新增
				updateReservedOrder(srd,wro,i,flag);
			}
			else if("D".equals(type) || null!=srd.getXLOEK()){
			 //删除
				 
			}
		}
	}
	
	private void updateReservedOrder(SapReservedData srd, WmsReservedOrder order,int i,boolean flag) {
		if(order == null){
			order = EntityFactory.getEntity(WmsReservedOrder.class);
		}
		order.setCode(srd.getRSNUM());//预留单号
		order.setSapCode(srd.getRSNUM());//预留号
		WmsSapFactory factory = this.getSapFactoryByCode(srd.getWERKS());
		
        order.setFactory(factory);//工厂
        order.setKcd(srd.getUMLGO());//收货库存地
        order.setJzrq(DateUtil.formatDate(srd.getRSDAT()));//基准日期
        order.setYhmc(srd.getUSNAM());//用户名称
        order.setYdlx(srd.getBWART());//移动类型 Z01/Z02/Z03/Z04等
        order.setCbzx(srd.getKOSTL());//成本中心
        order.setCbzxRemark(srd.getKTEXT());//成本中心描述
        if(flag){
			//新增
        	order.setStatus(ProductionOrderStatus.OPEN);
        	UpdateInfo updateInfo = new UpdateInfo();
            updateInfo.setCreatedTime(new Date());//创建时间
            order.setUpdateInfo(updateInfo);
        }else{
        	//修改
    		order.getUpdateInfo().setUpdateTime(new Date());//更新时间
        }
        commonDao.store(order);
        String hql = "FROM WmsReservedOrderDetail detail WHERE detail.reservedOrder.code =:code AND detail.project =:bomCode ";
        WmsReservedOrderDetail detail  = null;
        try {
        	detail = (WmsReservedOrderDetail) commonDao.findByQueryUniqueResult(hql, 
        			new String[]{"code","bomCode"},
        			new Object[]{srd.getRSNUM(),srd.getRSPOS()});
		} catch (Exception e) {
			e.printStackTrace();
			throw new BusinessException("根据预留单号"+srd.getRSNUM()+"和行项目"+srd.getRSPOS()+"查询到多条预留单明细数据!!!");
		}
        if(detail == null ){
    		detail = EntityFactory.getEntity(WmsReservedOrderDetail.class);
    		detail.setReservedOrder(order);
    		detail.setLineNo(i+"");
    		detail.setProject(srd.getRSPOS());
    	}
        detail.setDeleteFlag(srd.getXLOEK());//行项目删除标记
        detail.setZhfh(srd.getKZEAR());//最后发货
        WmsItem item = this.getItemByCode(srd.getMATNR());
        if (item==null) {
            throw new BusinessException("明细WmsItem【"+srd.getMATNR()+"】不存在");
        }
        detail.setItem(item);
        WmsPackageUnit pku =this.getWmsPackageUnitByItem(item.getId(),  srd.getMEINS());
        detail.setUnit(pku);//包装单位
        detail.setFactory(order.getFactory());//工厂
        detail.setShipLoc(srd.getLGORT());//发出库位
        detail.setRequestDate(DateUtil.formatDate(srd.getBDTER()));//需求日期
        detail.setQuantity(Double.valueOf(srd.getBDMNG().trim()));//需求量
        detail.setThQty(Double.valueOf(srd.getENMNG()==null?"0":srd.getENMNG().trim()));//提货数
        detail.setJdFlag(srd.getSHKZG());//借贷标识
        detail.setLineNoRemark(srd.getSGTXT());//行项目文本
        commonDao.store(detail);
	}

	public Wms2SapInterfaceLog createWms2SapInterfaceLog(String taskType, String type, String function, String fromSys, String toSys, String requestXml) {
        try {
        	Wms2SapInterfaceLog interfaceLog = EntityFactory.getEntity(Wms2SapInterfaceLog.class);
            interfaceLog.setType(type);
            interfaceLog.setFunction(function);
            interfaceLog.setFromSYS(fromSys);
            interfaceLog.setToSYS(toSys);
            interfaceLog.setRequestContent(XMLHelper.prettyXML(requestXml)); //格式化
            interfaceLog.setRequestTime(new Date());
            commonDao.store(interfaceLog);
            
            if(InterfaceLogFunction.ASYNC.equals(function)) { //异步方式
            	createInterfaceLogTask(taskType, interfaceLog.getId(),TaskSubscriber.WMS2SAPINTERFACELOG_DEAL); //保存执行报文任务
            }
            return interfaceLog;
        } catch (Exception e) {
            logger.error("", e);
            throw new BusinessException("保存报文失败");
        }
    }
	
	/**
     * 创建报文执行任务
     * 
     * @param taskType {@link InterfaceLogTaskType}
     * @param interfaceLogId
     */
    private Task createInterfaceLogTask(String taskType, Long interfaceLogId,String subscriber) {
        try {
            Task task = new Task(taskType, subscriber, interfaceLogId);//sub不能为空
            commonDao.store(task);
            return task;
        } catch (Exception e) {
            logger.error("", e);
            throw new BusinessException("保存报文执行任务失败");
        }
    }

	@Override
	public void dealSapSaleOutDelivery(SapSaleOutDeliveryArray datas) {
		System.out.println("开始处理Sap外向交货单..................");
        String type = datas.getTYPE();
        int i = 0;
        for(SapSaleOutDelivery order : datas.getSsods()){
        	i++;
        	try {
        		WmsDeliveryOrder deliveryOrder = null;
        		List<WmsDeliveryOrder> deliveryOrders = commonDao.findByQuery("FROM WmsDeliveryOrder "
                        + "WHERE sapCode=:sapCode", "sapCode", order.getVBELN());
        		if(deliveryOrders.isEmpty()){
        			deliveryOrder = EntityFactory.getEntity(WmsDeliveryOrder.class);
             	}
        		if(deliveryOrders.size()>1){
        			throw new BusinessException("根据SAP交货单号"+order.getVBELN()+"找到多条销售交货单数据");
        		}
        		if(deliveryOrders.size()==1){
        			deliveryOrder = deliveryOrders.get(0);
        		}
                if (!"D".equals(type)) {  // 新增
                    saveOrUpdateOutDeliveryOrder(order, deliveryOrder,i);
                } else if ("D".equals(type)) { //删除
                	List<WmsDeliveryOrderDetail> details = commonDao.findByQuery(" FROM WmsDeliveryOrderDetail d WHERE d.deliveryOrder.sapCode=:sapCode AND d.deliveryOrder.project=:project ",  new String[]{"sapCode","project"}, new Object[]{order.getVBELN(),order.getPOSNR()});
            		for(WmsDeliveryOrderDetail detail : details){
            			commonDao.delete(detail);
            		}
            		if(deliveryOrder !=null ){
            			commonDao.delete(deliveryOrder);
            		}
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                throw new BusinessException("类型:"+type + ",sap单条外向交货单处理失败。"+StringHelper.substring(CommonHelper.getErrorMessageByException(ex), 255));
            }
        }
	}
	
	public void dealSapReturnOrderCode(SapReturnOrderCodeArray srocs){
		System.out.println("开始处理 Sap交货单单号回传.........");
		String type = srocs.getTYPE();
		if(SapInterfaceType.SAP_COMMONCALLBACK_ITEYP_DOCODE.equals(type)){
			SapReturnOrderCode [] sros = srocs.getSapReturnOrderCodes();
			for(SapReturnOrderCode sro : sros){
				String hql = "FROM WmsDeliveryOrder delOrder WHERE delOrder.code =:code ";
				WmsDeliveryOrder deliveryOrder = (WmsDeliveryOrder) commonDao.findByQueryUniqueResult(hql, 
						new String[]{"code"}, new Object[]{sro.getWmsOrderCode()});
				if(deliveryOrder == null){
					throw new BusinessException("交货单单号:"+sro.getWmsOrderCode()+"WMS中不存在");
				}
				deliveryOrder.setSapCode(sro.getSapCode());
				commonDao.store(deliveryOrder);
				hql = "FROM Wms2SapInterfaceLog sapLog WHERE sapLog.request =:request ";
				List<Wms2SapInterfaceLog> w2sapLogs = commonDao.findByQuery(hql, 
						new String[]{"request"}, new Object[]{sro.getWmsOrderCode()});
				for(Wms2SapInterfaceLog w2sapLog :w2sapLogs){
					if(w2sapLog == null){
						throw new BusinessException("交货单:"+sro.getWmsOrderCode()+"报文不存在");
					}
					w2sapLog.setDealStatus(InterfaceLogStatus.STAT_FINISH);
					w2sapLog.setErrorLog(sro.getSapCode());
					w2sapLog.setResponseTime(new Date());
					commonDao.store(w2sapLog);
				}
			}
		}else {
			SapReturnOrderCode [] sros = srocs.getSapReturnOrderCodes();
			for(SapReturnOrderCode sro : sros){
				String hql = "FROM TclWmsInventoryLedger l WHERE l.code =:code";
				TclWmsInventoryLedger ledger = (TclWmsInventoryLedger) commonDao.findByQueryUniqueResult(hql, "code", sro.getWmsOrderCode());
				if(ledger == null){
					throw new BusinessException("库存台账单号:"+sro.getWmsOrderCode()+"WMS中不存在");
				}
				ledger.setSapCode(sro.getSapCode());
				commonDao.store(ledger);
				hql = "FROM Wms2SapInterfaceLog sapLog WHERE sapLog.docId =:docId ";
				List<Wms2SapInterfaceLog> w2sapLogs = commonDao.findByQuery(hql, 
						new String[]{"docId"}, new Object[]{ledger.getId()});
				for(Wms2SapInterfaceLog w2sapLog :w2sapLogs){
					if(w2sapLog == null){
						throw new BusinessException("交货单:"+sro.getWmsOrderCode()+"报文不存在");
					}
					w2sapLog.setDealStatus(InterfaceLogStatus.STAT_FINISH);
					w2sapLog.setResponseTime(new Date());
					w2sapLog.setErrorLog(sro.getSapCode());
					commonDao.store(w2sapLog);
				}
			}
		}
	}
	
	private void saveOrUpdateOutDeliveryOrder(SapSaleOutDelivery order, WmsDeliveryOrder deliveryOrder,int i) {
		  
        deliveryOrder.setSapCode(order.getVBELN());
        deliveryOrder.setCode(order.getVBELN());
        deliveryOrder.setStatus(WmsDeliveryOrderStatus.OPEN);
        
        //客户
        WmsCustomer customer = this.getWmsCustomerByCode(order.getKUNNR());
        if(customer == null){
        	customer = EntityFactory.getEntity(WmsCustomer.class);
        	WmsMasterGroup mg = commonDao.load(WmsMasterGroup.class, 1L);
        	customer.setMasterGroup(mg);
        	customer.setCode(order.getKUNNR());
        	customer.setName(order.getNAME1());
        	customer.setStatus(BaseStatus.ENABLED);
        	commonDao.store(customer);
        }
        deliveryOrder.setCustomer(customer);
        deliveryOrder.setDeliveryDate(DateUtil.formatDate(order.getWADAT()));
        deliveryOrder.setCreatedType(WmsDeliveryOrderCreatedType.SYSTEM);
        deliveryOrder.setProject(order.getPOSNR());
        deliveryOrder.setType(order.getLFART());
       
        String hql = "FROM WmsDeliveryOrderDetail dod WHERE dod.posnr =:posnr AND dod.deliveryOrder.code=:code ";
        WmsDeliveryOrderDetail detail = null;
        List<WmsDeliveryOrderDetail> details=commonDao.findByQuery(hql, new String[]{"posnr","code"}, new Object[]{order.getPOSNR(),order.getVBELN()});
        if(details.size()>1){
        	throw new BusinessException("根据交货单号"+order.getVBELN()+"和行项目"+order.getPOSNR()+"找到多条销售交货单明细");
        }
        if(details.size()==1){
        	detail = details.get(0);
        }
        if(detail == null){
        	UpdateInfo updateInfo = new UpdateInfo();
            updateInfo.setCreatedTime(new Date());
            updateInfo.setCreator(order.getERNAM());
            deliveryOrder.setUpdateInfo(updateInfo);
            deliveryOrder.setBillTypeName(WmsDeliveryOrderBillType.XSBILLTYPE);
        	detail = EntityFactory.getEntity(WmsDeliveryOrderDetail.class);
        	detail.setLineNo(i); // 明细行号 当前单明细
        	detail.setPosnr(order.getPOSNR());//行项目
        }
        updateDoOutDeliveryDetail(detail,deliveryOrder,order);
    }
	
	private void updateDoOutDeliveryDetail(WmsDeliveryOrderDetail detail,WmsDeliveryOrder deliveryOrder,SapSaleOutDelivery order) {
		detail.setDeliveryOrder(deliveryOrder);
        WmsItem item =this.getItemByCode(order.getMATNR());
        if (item==null) {
            throw new BusinessException("WMS物料【"+order.getMATNR()+"】未维护");
        }
        detail.setItem(item);
        WmsSapFactory factory = this.getSapFactoryByCode(order.getWERKS());
        Set<WmsDeliveryOrderDetail> details = deliveryOrder.getDetails();
    	for (WmsDeliveryOrderDetail dod : details) {
    		if(!factory.getId().equals(dod.getFactory().getId())){
    			throw new BusinessException("交货单明细的工厂必须一致");
    		}
    	}
        detail.setFactory(factory);
        detail.setKcdd(order.getLGORT());
        detail.setPlanQuantityBu(Double.parseDouble(order.getLFIMG()==null ? "0" : order.getLFIMG()));
        detail.setTheDeliveryQuantityBu(Double.parseDouble(order.getLFIMG()==null?"0":order.getLFIMG()));
        detail.setDelivedQuantityBu(0D);
        detail.setPoNo(order.getVGBEL());
        detail.setPoDetailNo(order.getVGPOS());
        WmsPackageUnit pku = this.getWmsPackageUnitByItem(item.getId(), order.getMEINS());
        detail.setPackageUnit(pku);
        //仓库
        String pstype = WmsFactoryXmlb.BZ;
        WmsWarehouse house = null;
        if(null!=pstype){
        	String houseHql = "SELECT wfw.warehouse FROM WmsFactoryWarehouse wfw where wfw.factory=:wf and wfw.type=:wt";
        	house = (WmsWarehouse)commonDao.findByQueryUniqueResult(houseHql, new String[]{"wf","wt"}, new Object[]{factory,pstype});
        }
        if(null!=house){
        	deliveryOrder.setWarehouse(house);
        	commonDao.store(deliveryOrder);
        	commonDao.store(detail);
        }
	}
	
	public void dealSapCheckOrder(SapCheckOrderArray scoas){
		System.out.println("开始处理Sap标准对账单..................");
		String filepath = "标准对账单";
		List<String> title = new ArrayList<String>();
		title.add("行号");
		title.add("项目类别");
		title.add("供应商");
		title.add("供应商描述");
		title.add("过帐日期");
		title.add("凭证日期");
		title.add("采购凭证");
		title.add("项目");
		title.add("工厂");
		title.add("采购组");
		title.add("物料号");
		title.add("物料描述");
		title.add("入库凭证");
		title.add("入库凭证行");
		title.add("入库数量");
		title.add("入库单位");
		title.add("库位");
		title.add("应执行单价");
		title.add("价格单位");
		title.add("价格有效从");
		title.add("价格有效到");
		title.add("应执行净额");
		title.add("应执行税额");
		title.add("应执行含税金额");
		title.add("过账发票数量");
		title.add("过账发票金额");
		title.add("预制发票数量");
		title.add("预制发票金额");
		title.add("发票数量总计");
		title.add("发票金额总计");
		title.add("送货单号");
		
		Map<String,List<List<String>>> supMap = new HashMap<String, List<List<String>>>();
		for(SapCheckOrder sco : scoas.getScos()){
			try{
				saveOrUpdateCheckOrder(supMap,title,filepath,sco);
			}catch(Exception ex){
				ex.printStackTrace();
                throw new BusinessException("供应商:"+sco.getLIFNR()+"日期:"+sco.getBUDAT() + ",sap标准对账单处理失败。");
			}
		}
		for(Entry<String, List<List<String>>> s :supMap.entrySet()){
			ExcelHelper.write2xls(s.getValue(), excelPath+filepath+s.getKey()+".xls");
		}
	}
	
	private void saveOrUpdateCheckOrder(Map<String,List<List<String>>> supMap,List<String> title,String filepath,SapCheckOrder sco){
		WmsCheckOrder order = this.getWmsCheckOrder(sco.getLIFNR(),StringHelper.substring(sco.getBUDAT(), 6));
		if(order == null){
			//新增
			order = EntityFactory.getEntity(WmsCheckOrder.class);
		}
		WmsSupplier supplier = (WmsSupplier) commonDao.findByQueryUniqueResult("FROM WmsSupplier WHERE code=:code", 
                "code", sco.getLIFNR());
		if (supplier==null) {
			supplier = EntityFactory.getEntity(WmsSupplier.class);
			supplier.setCode(sco.getLIFNR());
			supplier.setName(sco.getNAME1());
			commonDao.store(supplier);
//			throw new BusinessException("WMS供应商【"+sco.getLIFNR()+"】不存在");
		}
		List<List<String>> infos = new ArrayList<List<String>>();
		List<String> scoInfos = new ArrayList<String>();
		scoInfos.add(sco.getLINENO());
		scoInfos.add(sco.getPSTYP());
		scoInfos.add(sco.getLIFNR());
		scoInfos.add(sco.getNAME1());
		scoInfos.add(sco.getBUDAT());
		scoInfos.add(sco.getBLDAT());
		scoInfos.add(sco.getEBELN());
		scoInfos.add(sco.getEBELP());
		scoInfos.add(sco.getWERKS());
		scoInfos.add(sco.getEKGRP());
		scoInfos.add(sco.getMATNR());
		scoInfos.add(sco.getMAKTX());
		scoInfos.add(sco.getMBLNR());
		scoInfos.add(sco.getZEILE());
		scoInfos.add(sco.getMENGE());
		scoInfos.add(sco.getBPRME());
		scoInfos.add(sco.getLGORT());
		scoInfos.add(sco.getNETPR1());
		scoInfos.add(sco.getPEIN2());
		scoInfos.add(sco.getDATAB());
		scoInfos.add(sco.getDATBI());
		scoInfos.add(sco.getNETWR1());
		scoInfos.add(sco.getBTAXA());
		scoInfos.add(sco.getETAXA());
		scoInfos.add(sco.getBPMNG1());
		scoInfos.add(sco.getDMBTR1());
		scoInfos.add(sco.getBPMNG2());
		scoInfos.add(sco.getDMBTR2());
		scoInfos.add(sco.getBPMNG3());
		scoInfos.add(sco.getDMBTR3());
		scoInfos.add(sco.getXBLNR());
		String key = sco.getLIFNR()+StringHelper.substring(sco.getBUDAT(), 6);
		if(supMap.containsKey(key)){
			supMap.get(key).add(scoInfos);
		}else{
			infos.add(title);
			infos.add(scoInfos);
			supMap.put(key, infos);
		}
		order.setFilename(filepath+sco.getLIFNR()+StringHelper.substring(sco.getBUDAT(), 6));
		order.setFilepath(excelPath+filepath+sco.getLIFNR()+StringHelper.substring(sco.getBUDAT(), 6)+".xls");
		order.setCode(StringHelper.substring(sco.getBUDAT(), 6));
		order.setStatus(WmsCheckOrderStatus.OPEN);
		order.setXmlb(WmsFactoryXmlb.BZ);
		order.setSupplier(supplier);
		createEmailRecord(supplier, sco);//生成邮件
		commonDao.store(order);
	}
	
	public void dealSapJSCheckOrder(SapJSCheckOrderArray scoas){
		System.out.println("开始处理Sap寄售对账单..................");
		String filepath = "寄售对账单";
		List<String> title = new ArrayList<String>();
		title.add("行号");
		title.add("项目类别");
		title.add("供应商");
		title.add("供应商描述");
		title.add("过帐日期");
		title.add("出库单号");
		title.add("出库行项目");
		title.add("工厂");
		title.add("采购组");
		title.add("物料号");
		title.add("物料描述");
		title.add("出库数量");
		title.add("出库单位");
		title.add("库位");
		title.add("移动类型");
		title.add("借贷标识");
		title.add("定价控制类别");
		title.add("税码");
		title.add("应执行单价");
		title.add("价格单位");
		title.add("价格有效从");
		title.add("价格有效到");
		title.add("应执行净额");
		title.add("应执行税额");
		title.add("应执行含税金额");
		title.add("结算标识");
		title.add("财务结算凭证");
		title.add("财务凭证行项目");
		title.add("结算数量");
		title.add("结算金额");
		Map<String,List<List<String>>> supMap = new HashMap<String, List<List<String>>>();
		for(SapJSCheckOrder sco : scoas.getScos()){
			try{
				saveOrUpdateJSCheckOrder(supMap,title,filepath,sco);
			}catch(Exception ex){
				ex.printStackTrace();
				throw new BusinessException("供应商:"+sco.getLIFNR()+"日期:"+sco.getBUDAT() + ",sap寄售对账单处理失败。");
			}
		}
		for(Entry<String, List<List<String>>> s :supMap.entrySet()){
			ExcelHelper.write2xls(s.getValue(), excelPath+filepath+s.getKey()+".xls");
		}
	}
	
	private void saveOrUpdateJSCheckOrder(Map<String,List<List<String>>> supMap,List<String> title,String filepath,SapJSCheckOrder sco){
		WmsCheckOrder order = this.getWmsCheckOrder(sco.getLIFNR(),StringHelper.substring(sco.getBUDAT(), 6));
		if(order == null){
			//新增
			order = EntityFactory.getEntity(WmsCheckOrder.class);
		}
		WmsSupplier supplier = this.getSupplierByCode(sco.getLIFNR());
		if (supplier==null) {
			throw new BusinessException("WMS供应商【"+sco.getLIFNR()+"】不存在");
		}
		List<List<String>> infos = new ArrayList<List<String>>();
		List<String> scoInfos = new ArrayList<String>();
		scoInfos.add(sco.getLINENO());
		scoInfos.add(sco.getPSTYP());
		scoInfos.add(sco.getLIFNR());
		scoInfos.add(sco.getNAME1());
		scoInfos.add(sco.getBUDAT());
		scoInfos.add(sco.getMBLNR());
		scoInfos.add(sco.getZEILE());
		scoInfos.add(sco.getWERKS());
		scoInfos.add(sco.getEKGRP());
		scoInfos.add(sco.getMATNR());
		scoInfos.add(sco.getMAKTX());
		scoInfos.add(sco.getMENGE());
		scoInfos.add(sco.getBPRME());
		scoInfos.add(sco.getLGORT());
		scoInfos.add(sco.getBWART());
		scoInfos.add(sco.getSHKZG());
		scoInfos.add(sco.getMEPRF());
		scoInfos.add(sco.getMWSKZ());
		scoInfos.add(sco.getNETPR1());
		scoInfos.add(sco.getPEIN2());
		scoInfos.add(sco.getDATAB());
		scoInfos.add(sco.getDATBI());
		scoInfos.add(sco.getNETWR1());
		scoInfos.add(sco.getBTAXA());
		scoInfos.add(sco.getETAXA());
		scoInfos.add(sco.getJSBS());
		scoInfos.add(sco.getBELNR());
		scoInfos.add(sco.getBUZEI());
		scoInfos.add(sco.getBSTMG());
		scoInfos.add(sco.getWRBTR());
		
		String key = sco.getLIFNR()+StringHelper.substring(sco.getBUDAT(), 6);
		if(supMap.containsKey(key)){
			supMap.get(key).add(scoInfos);
		}else{
			infos.add(title);
			infos.add(scoInfos);
			supMap.put(key, infos);
		}
		
		order.setFilename(filepath+sco.getLIFNR()+StringHelper.substring(sco.getBUDAT(), 6));
		order.setFilepath(excelPath+filepath+sco.getLIFNR()+StringHelper.substring(sco.getBUDAT(), 6)+".xls");
		order.setCode(StringHelper.substring(sco.getBUDAT(), 6));
		order.setStatus(WmsCheckOrderStatus.OPEN);
		order.setXmlb(WmsFactoryXmlb.JS);
		order.setSupplier(supplier);
		createEmailRecord(supplier, sco);//生成邮件
		commonDao.store(order);
	}
	
	public void dealSapProductOrderIn(SapProductOrderInArray spoias){
		System.out.println("开始处理Sap生产订单入库单..................");
		Map<Long,Double> orderDetails = new HashMap<Long, Double>();//生产订单明细
		WmsWarehouse warehouse = null;
		WmsASN asn = EntityFactory.getEntity(WmsASN.class);
		StringHelper.assertNullOrEmpty(spoias.getTYPE(), "TYPE属性不能为空");
		String type = spoias.getTYPE();
		int i =0;
		for(SapProductOrderIn spois : spoias.getSpois()){
			try{
				String hql = "FROM ProductionOrderDetail detail WHERE detail.productionOrder.code =:code AND detail.item.code =:itemCode ";
				ProductionOrderDetail detail = (ProductionOrderDetail) commonDao.findByQueryUniqueResult(hql, new String[]{"code","itemCode"}, new Object[]{spois.getAUFNR(),spois.getMATNR()});
				if(detail == null){
					throw new BusinessException("未找到对应的生产订单号："+spois.getAUFNR()+"和物料："+spois.getMATNR());
				}
				ProductionOrder productionOrder = commonDao.load(ProductionOrder.class, detail.getProductionOrder().getId());
				/**获取仓库*/
				if(i == 0){
					WmsFactoryWarehouse fFactoryWarehouse =  findWmsFactoryWarehouse(productionOrder.getFactory().getId());
					if (null == fFactoryWarehouse) {
						throw new BusinessException("factory.warehouse.not.found.by.factory", new String[]{productionOrder.getFactory().getName()});
					}
					warehouse = fFactoryWarehouse.getWarehouse();
					i = 1;
				}
				if("01".equals(type)){ //工单入库 
					Double qty = detail.getPlanQuantityBu()/productionOrder.getPlanQuantity()*Double.valueOf(spois.getMENGE());
					if(!qty.equals(Double.valueOf(spois.getMENGE02()))){
						throw new BusinessException("数量不正确");
					}
					productionOrder.setItemTag(spois.getMBLNR());
					commonDao.store(productionOrder);
					if(!orderDetails.containsKey(detail.getId())){
						orderDetails.put(detail.getId(), qty);
					}
				}else if("02".equals(type)){ //工单取消入库  生成ASN
					//找出库的批次信息
			        hql = "FROM WmsTask task WHERE task.productionDetailId =:productionDetailId ";
			        List<WmsTask> tasks = commonDao.findByQuery(hql, "productionDetailId", detail.getId());
			        if(tasks.isEmpty()){
			        	throw new BusinessException(productionOrder.getCode()+"生产订单未发过货,不能取消入库");
			        }
			        Double qty = detail.getPlanQuantityBu()/productionOrder.getPlanQuantity()*Double.valueOf(spois.getMENGE());
					if(!qty.equals(Double.valueOf(spois.getMENGE02()))){
						throw new BusinessException("数量不正确");
					}
					if(asn.isNew()){
						WmsBillType billType = (WmsBillType) commonDao.findByQueryUniqueResult("FROM WmsBillType WHERE code=:code", 
				                  "code", "SCTLD");
						String code = wmsBussinessCodeManager.generateCodeByRule(warehouse, billType.getCode()); 
						asn.setWarehouse(warehouse);
						asn.setBillType(billType);
						asn.setCode(code);
						asn.setCompany(getDefaultWmsCompany());
						asn.setCustomerBill(productionOrder.getCode());
						asn.setOrderDate(new Date());
						asn.setStatus(WmsASNStatus.OPEN);
						asn.setUserField7(productionOrder.getFactory().getCode());
						List<WmsLocation> locs = commonDao.findByQuery("FROM WmsLocation receiveLocation "
				                  + "WHERE receiveLocation.status = 'ENABLED' "
				                  + "AND receiveLocation.type = 'RECEIVE' "
				                  + "AND receiveLocation.warehouse.id = :warehouseId", 
				                  "warehouseId", warehouse.getId());
				          
				        if (locs!=null && locs.size()>0) {
				        	asn.setReceiveLocation(locs.get(0));
				        } else {
				            throw new BusinessException("当前仓库未维护收货库位!");
				        }
					}
					WmsASNDetail asnDetail = EntityFactory.getEntity(WmsASNDetail.class);
					asnDetail.setLineNo(i*10);
					WmsItem item = this.getItemByCode(spois.getMATNR());
					if(item==null){
						throw new BusinessException("根据编码"+spois.getMATNR()+"未找到物料");
					}
					asnDetail.setItem(item);
					asnDetail.setPackageUnit(detail.getPackageUnit());
					asnDetail.setExpectedQty(qty);
			        asnDetail.setExpectedPackQty(qty);
			        asnDetail.setLotInfo(tasks.get(0).getItemKey().getLotInfo());
			        asn.setUserField5(tasks.get(0).getItemKey().getLotInfo().getExtendPropC8());
			        WmsSupplier supplier = this.getSupplierByCode(tasks.get(0).getItemKey().getLotInfo().getSupplierCode());
			        asn.setSupplier(supplier);
			        asnDetail.setAsn(asn);
			        asn.addDetail(asnDetail);
			        commonDao.store(asn);
			        commonDao.store(asnDetail);
			        asn.refreshQtyBU();
			        i++;
				}
			}catch(Exception e){
				e.printStackTrace();
				throw new BusinessException("物料凭证号："+spois.getMBLNR()+"生产订单号："+spois.getAUFNR()+"sap生产订单入库单处理失败"); 
			}
		}
		if("01".equals(type)){
			/**生成JIT出库单*/
			WmsWorkDoc workDoc = new WmsWorkDoc();
			WmsTclWorkDocManager tclWorkDocManager = (WmsTclWorkDocManager) applicationContext.getBean("wmsTclWorkDocManager");
			workDoc = tclWorkDocManager.newWorkDoc(null, workDoc,WmsItemJITAtt.JIT_DOWNLINE_SETTLE,warehouse);
			for(Entry<Long, Double> s :orderDetails.entrySet()){
				ProductionOrderDetail d = commonDao.load(ProductionOrderDetail.class, s.getKey());
				tclWorkDocManager.dealProductOrderDetail(d, s.getValue(), workDoc.getId());
			}
		}
		if("02".equals(type)){
			workflowManager.doWorkflow(asn,"wmsASNProcess.active");
			
		}
	}
	
	public void createWmsPickTicketByProductionOrderDetail(ProductionOrderDetail detail,Double quantity){
		ProductionOrder productionOrder = commonDao.load(ProductionOrder.class, detail.getProductionOrder().getId());
		WmsFactoryWarehouse fFactoryWarehouse = findWmsFactoryWarehouse(productionOrder.getFactory().getId());
		if (null == fFactoryWarehouse) {
			throw new BusinessException("factory.warehouse.not.found.by.factory", new String[]{productionOrder.getFactory().getName()});
		}
		String hql = "from WmsPickTicket pick where pick.relatedBill1 =:relatedBill1 and pick.userField1 =:userField1 ";
		WmsPickTicket pickTicket = (WmsPickTicket) commonDao.findByQueryUniqueResult(hql, new String[]{"relatedBill1","userField1"}, new Object[]{productionOrder.getCode(),productionOrder.getItemTag()});
		if(pickTicket == null){
			pickTicket = productionOrderManager.createWmsPickTicketByProductionOrder(fFactoryWarehouse.getWarehouse(), productionOrder.getBeginDate(),WmsPickticketGenType.SCLLD);
		}
		WmsPickTicketDetail pickTicketDetail = productionOrderManager.creatWmsPickTicketDetail(pickTicket, detail.getItem(), detail.getPackageUnit(), quantity);
		productionOrderManager.storeProductionOrderDetailPtDetail(detail, pickTicketDetail,quantity);
		
		productionOrder.setBeCreatPt(Boolean.TRUE);
		pickTicket.setRelatedBill1(productionOrder.getCode());
		pickTicket.setUserField1(productionOrder.getItemTag());
		this.commonDao.store(pickTicket);
		this.commonDao.store(productionOrder);
	}
	
	public String getMaxLineNoByPickTicketDetail(Long pickTicketId) {
		Integer lineNo = (Integer) commonDao.findByQueryUniqueResult("SELECT MAX(detail.lineNo) FROM WmsPickTicketDetail detail WHERE detail.pickTicket.id = :pickTicketId", 
				new String[] {"pickTicketId"}, new Object[] {pickTicketId});
		if (lineNo == null || lineNo.intValue() == 0) {
			lineNo = 1;
		} else {
			lineNo += 1;
		}

		return ""+lineNo;
	}
	
	public WmsFactoryWarehouse findWmsFactoryWarehouse(Long factoryId){
		String hql = "  FROM WmsFactoryWarehouse fw WHERE fw.factory.id =:factoryId "
						+ " AND fw.type =:type";
		return  (WmsFactoryWarehouse) this.commonDao.findByQueryUniqueResult(hql, new String[]{"factoryId","type"}, new Object[]{factoryId,WmsFactoryXmlb.BZ});
		
	}
	
}
